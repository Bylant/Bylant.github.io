<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Alibaba Cloud Toolkit工具一键部署本地应用到ECS服务器</title>
      <link href="/2019/01/31/alibaba-cloud-toolkit-gong-ju-yi-jian-bu-shu-ben-di-ying-yong-dao-ecs-fu-wu-qi/"/>
      <url>/2019/01/31/alibaba-cloud-toolkit-gong-ju-yi-jian-bu-shu-ben-di-ying-yong-dao-ecs-fu-wu-qi/</url>
      
        <content type="html"><![CDATA[<h2 id="Alibaba-Cloud-Toolkit工具一键部署本地应用到ECS服务器"><a href="#Alibaba-Cloud-Toolkit工具一键部署本地应用到ECS服务器" class="headerlink" title="Alibaba Cloud Toolkit工具一键部署本地应用到ECS服务器"></a>Alibaba Cloud Toolkit工具一键部署本地应用到ECS服务器</h2><p><img src="https://img-blog.csdnimg.cn/20181209133458931.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1lDbGltYg==,size_16,color_FFFFFF,t_70" alt="Alibaba Cloud Toolkit"></p><h3 id="什么是-Alibaba-Cloud-Toolkit"><a href="#什么是-Alibaba-Cloud-Toolkit" class="headerlink" title="什么是 Alibaba Cloud Toolkit"></a>什么是 Alibaba Cloud Toolkit</h3><p>Alibaba Cloud Toolkit （后文简称 Cloud Toolkit）是阿里云针对 IDE 平台为开发者提供的一款插件，用于帮助开发者高效开发并部署适合在云端运行的应用。在本地完成应用程序的开发、调试和测试后，可以使用在 IED （如 Eclipse 或 IntelliJ）中安装的 Cloud Toolkit 插件，通过图形配置的方式连接到云端部署环境并将应用程序快如部署到云端。</p><blockquote><p>说明：目前 Cloud Toolkit 仅支持 Eclipse、Intellij 等其它开发环境开发中，请您持续关注 Cloud Tookit 动态。</p></blockquote><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>官方有提供的文档说明:</p><pre><code>https://help.aliyun.com/product/29966.html</code></pre><h3 id="使用IDEA安装和配置Cloud-Toolkit"><a href="#使用IDEA安装和配置Cloud-Toolkit" class="headerlink" title="使用IDEA安装和配置Cloud Toolkit"></a>使用IDEA安装和配置Cloud Toolkit</h3><h4 id="在idea上安装Alibaba-Cloud-Toolkit插件"><a href="#在idea上安装Alibaba-Cloud-Toolkit插件" class="headerlink" title="在idea上安装Alibaba Cloud Toolkit插件"></a>在idea上安装Alibaba Cloud Toolkit插件</h4><p>到 Idea 插件库中进行下载，如下图：</p><p><img src="http://pkon92vqd.bkt.clouddn.com/1.png" alt=""></p><p>如果插件下载速度比较慢，稍等一会，因为是国外网站，下载完成后需要重启 idea 应用后生效。</p><h4 id="配置Alibaba-Cloud-Toolkit的Account信息"><a href="#配置Alibaba-Cloud-Toolkit的Account信息" class="headerlink" title="配置Alibaba Cloud Toolkit的Account信息"></a>配置Alibaba Cloud Toolkit的Account信息</h4><p><img src="http://pkon92vqd.bkt.clouddn.com/2.png" alt=""></p><p><img src="http://pkon92vqd.bkt.clouddn.com/3.png" alt=""></p><p>其中 Access Key 和 Access Key Secret 信息可以到阿里云控制台查询获得</p><p><img src="http://pkon92vqd.bkt.clouddn.com/3.5.png" alt=""></p><p>创建完成并配置好Account后，在 ECS on Alibaba Cloud 视图中可以看到，会检索到你的实例</p><p><img src="http://pkon92vqd.bkt.clouddn.com/4.png" alt=""></p><h4 id="开始部署项目到ECS服务器"><a href="#开始部署项目到ECS服务器" class="headerlink" title="开始部署项目到ECS服务器"></a>开始部署项目到ECS服务器</h4><p>鼠标选中你的项目，然后右键，找到 Alibaba Cloud 选项</p><p><img src="http://pkon92vqd.bkt.clouddn.com/5.png" alt=""></p><p>然后填写其他信息，项目部署位置等，如果你的Account配置没有问题，则会自动账户显示对应的ECS服务器，在发布时，需要手动选择某台服务器，一定要选择哦！</p><p>对于Command的编写，可以参考官方文档</p><pre><code>https://yq.aliyun.com/articles/665693</code></pre><p><img src="http://pkon92vqd.bkt.clouddn.com/6.png" alt=""></p><p>配置成功后，可以点击Run运行程序，此时会自动为我们编译并上传到阿里云服务器中，发布到地址就是上图中的Deploy Location中的路径，发布前如果需要Maven执行，一定不要忘记配置上图中Maven的命令，中间的Command是在上传到服务器成功后执行的命令，主要用于应用的启动停止重启等。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>好了，到此如果没有其他问题的话，你就会已经发布成功了，从此失去手动打包、上传再发布的繁琐过程了，这个插件针对个人开发用户来说是极其友好的，因为个人开发者一般不会像企业级开发一样部署 Jekins 等大型部署工具，而这个时候如果使用 Alibaba Cloud Toolkit ,在信息配置好的情况可以说基本就是一键部署！</p><p>再贴一下官网地址：</p><pre><code>https://www.aliyun.com/product/cloudtoolkit</code></pre><p>官网介绍的更加详细，也有官方钉钉群，大家感兴趣的可以加入进行深入交流。</p><p><img src="https://yqfile.alicdn.com/5685e931e06cd61faa41dee0ad46bf251fe56837.png" alt="5685e931e06cd61faa41dee0ad46bf251fe56837"></p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
            <tag> 服务器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何在面试中介绍自己的项目经验</title>
      <link href="/2019/01/29/ru-he-zai-mian-shi-zhong-jie-shao-zi-ji-de-xiang-mu-jing-yan/"/>
      <url>/2019/01/29/ru-he-zai-mian-shi-zhong-jie-shao-zi-ji-de-xiang-mu-jing-yan/</url>
      
        <content type="html"><![CDATA[<h3 id="如何在面试中介绍自己的项目经验"><a href="#如何在面试中介绍自己的项目经验" class="headerlink" title="如何在面试中介绍自己的项目经验"></a>如何在面试中介绍自己的项目经验</h3><blockquote><p>在面试时，经过寒暄后，一般面试官会让介绍项目经验 。常见的问法是，说下你最近的（或最拿得出手的）一个项目。<br>根据我们的面试经验，发现有不少候选人对此没准备，说起来磕磕巴巴，甚至有人说出项目经验从时间段或技术等方面和简历上的不匹配，这样就会造成如下的后果。<br> 1 第一印象就不好了，至少会感觉该候选人表述能力不强。<br> 2 一般来说，面试官会根据候选人介绍的项目背景来提问题，假设面试时会问10个问题，那么至少有5个问题会根据候选人所介绍的项目背景来问，候选人如果没说好，那么就没法很好地引导后继问题了，就相当于把提问权完全交给面试官了。</p></blockquote><p>面试时7份靠能力，3份靠技能，而刚开始时的介绍项目又是技能中的重中之重，所以本文将从“介绍”和“引导”两大层面告诉大家如何准备面试时的项目介绍。<br>好了，如下是正文内容。</p><hr><h3 id="1-在面试前准备项目描述，别害怕，因为面试官什么都不知道"><a href="#1-在面试前准备项目描述，别害怕，因为面试官什么都不知道" class="headerlink" title="1 在面试前准备项目描述，别害怕，因为面试官什么都不知道"></a>1 在面试前准备项目描述，别害怕，因为面试官什么都不知道</h3><p>面试官是人，不是神，拿到你的简历的时候，是没法核实你的项目细节的（一般公司会到录用后，用背景调查的方式来核实）。更何况，你做的项目是以月为单位算的，而面试官最多用30分钟来从你的简历上了解你的项目经验，所以你对项目的熟悉程度要远远超过面试官，所以你一点也不用紧张。如果你的工作经验比面试官还丰富的话，甚至还可以控制整个面试流程（笔者在面试方面成精后也经常干这种事情，大家一定也能行）。</p><table><thead><tr><th></th><th><strong>你</strong></th><th><strong>面试官</strong></th></tr></thead><tbody><tr><td>对你以前的项目和技能</td><td>很了解</td><td>只能听你说，只能根据你说的内容做出判断</td></tr><tr><td>在面试过程中的职责</td><td>在很短的时间内防守成功即可</td><td>如果找不出漏洞，就只能算你以前做过</td></tr><tr><td>准备时间</td><td>面试前你有充足的时间准备</td><td>一般在面试前用30分钟阅读你的简历</td></tr><tr><td>沟通过程</td><td>你可以出错，但别出关键性的错误</td><td>不会太为难你，除非你太差</td></tr><tr><td>技巧</td><td>你有足够的技巧，也可以从网上找到足够多的面试题</td><td>其实就问些通用的有规律的问题</td></tr></tbody></table><p>既然面试官无法了解你的底细，那么他们怎么来验证你的项目经验和技术？下面总结了一些常用的提问方式。</p><table><thead><tr><th><strong>提问方式</strong></th><th><strong>目的</strong></th></tr></thead><tbody><tr><td>让你描述工作经验和项目（极有可能是最近的），看看你说的是否和简历上一致</td><td>看你是否真的做过这些项目</td></tr><tr><td>看你简历上项目里用到的技术，比如框架、数据库，然后针对这些技术提些基本问题</td><td>还是验证你是否做过项目，同时看你是否了解这些技术，为进一步提问做准备</td></tr><tr><td>针对某个项目，不断深入地问一些技术上的问题，或者从不同侧面问一些技术实现，看你前后回答里面是否有矛盾</td><td>深入核实你的项目细节</td></tr><tr><td>针对某技术，问些项目里一定会遇到的问题，比如候选人说做过数据库，那么就会问索引方面的问题</td><td>通过这类问题，核实候选人是否真的有过项目经验（或者还仅仅是学习经验）</td></tr></tbody></table><h3 id="2-准备项目的各种细节，一旦被问倒了，就说明你没做过"><a href="#2-准备项目的各种细节，一旦被问倒了，就说明你没做过" class="headerlink" title="2  准备项目的各种细节，一旦被问倒了，就说明你没做过"></a>2  准备项目的各种细节，一旦被问倒了，就说明你没做过</h3><p> 一般来说，在面试前，大家应当准备项目描述的说辞，自信些，因为这部分你说了算，流利些，因为你经过充分准备后，可以知道你要说些什么。而且这些是你实际的项目经验（不是学习经验，也不是培训经验），那么一旦让面试官感觉你都说不上来，那么可信度就很低了。</p><p>不少人是拘泥于“项目里做了什么业务，以及代码实现的细节”，这就相当于把后继提问权直接交给面试官。下表列出了一些不好的回答方式。</p><table><thead><tr><th><strong>回答方式</strong></th><th><strong>后果</strong></th></tr></thead><tbody><tr><td>我在XX软件公司做了XX门户网站项目，这个项目做到了XX功能，具体是XX和XX模块，各模块做了XX功能，客户是XX，最后这个项目挣了XX钱</td><td>直接打断，因为业务需求我不需要了解，我会直接问他项目里的技术</td></tr><tr><td>（需要招聘一个Java后端开发，会Spring MVC）最近一个项目我是用C#（或其他非Java技术）实现的，实现了……或者我最近做的不是开发，而是测试……或者我最近的项目没有用到Spring MVC</td><td>提问，你最近用到SSH技术的项目是什么时候，然后在评语上写：最近XX时间没接触过SSH</td></tr><tr><td>在毕业设计的时候（或者在读书的时候，在学习的时候，在XX培训学校，在XX实训课程中），……</td><td>直接打断，提问你这个是否是商业项目，如果不是，你有没有其他的商业经验。如果没商业项目经验，除非是校招，否则就直接结束面试</td></tr><tr><td>描述项目时，一些关键要素（比如公司、时间、所用技术等）和简历上的不匹配</td><td>我们会深究这个不一致的情况，如果是简历造假，那么可能直接中断面试，如果真的是笔误，那么就需要提供合理的解释</td></tr></tbody></table><p>在避免上述不好的回答的同时，大家可以按下表所给出的要素准备项目介绍。如果可以，也请大家准备一下用英语描述。其实刚毕业的学生，或者工作经验较少的人，英语能力都差不多，但你说了，这就是质的进步。      </p><table><thead><tr><th>要素</th><th>样式</th></tr></thead><tbody><tr><td>控制在1分钟里面，讲出项目基本情况，比如项目名称，背景，给哪个客户做，完成了基本的事情，做了多久，项目规模多大，用到哪些技术，数据库用什么，然后酌情简单说一下模块。重点突出背景，技术，数据库和其他和技术有关的信息。</td><td>我在XX公司做了XX外汇保证金交易平台，客户是XX银行，主要完成了挂盘，实盘成交，保证金杠杆成交等功能，数据库是Oracle，前台用到JS等技术，后台用到Java的SSH，几个人做了X个月。不需要详细描述各功能模块，不需要说太多和业务有关但和技术无关的。如果面试官感兴趣，等他问。</td></tr><tr><td>要主动说出你做了哪些事情，这部分的描述一定需要和你的技术背景一致。</td><td>我做了外汇实盘交易系统，挂单成交系统，XXX模块，做了X个月</td></tr><tr><td>描述你在项目里的角色</td><td>我主要是做了开发，但在开发前，我在项目经理的带领下参与了业务调研，数据库设计等工作，后期我参与了测试和部署工作。</td></tr><tr><td>可以描述用到的技术细节，特别是你用到的技术细节，这部分尤其要注意，你说出口的，一定要知道，因为面试官后面就根据这个问的。你如果做了5个模块，宁可只说你能熟练说上口的2个。</td><td>用到了Java里面的集合，JDBC，…等技术，用到了Spring MVC等框架，用技术连接数据库。</td></tr><tr><td>这部分你风险自己承担，如果可以，不露声色说出一些热门的要素，比如Linux，大数据，大访问压力等。但一旦你说了，面试官就会直接问细节。</td><td>这个系统里，部署在Linux上，每天要处理的数据量是XX，要求是在4小时，1G内存是的情况下处理完5千万条数据。平均访客是每分钟XXX。</td></tr></tbody></table><p>面试前，你一定要准备，一定要有自信，但也要避免如下的一些情况。     </p><table><thead><tr><th>要避免的情况</th><th>正确的做法</th><th>原因</th></tr></thead><tbody><tr><td>回答很简单。问什么答什么，往往就用一句话回答</td><td>把你知道的都说出来，重点突出你知道的思想，框架</td><td>问：你SSH用过吗？答：用过。问：在什么项目里用到？答：一个保险项目问：你做了哪方面的事情？答：开发我直接不问了</td></tr><tr><td>说得太流利</td><td>适当停顿，边思考边说</td><td>让面试官感觉你在背准备的东西，这样后面问题就很难</td></tr><tr><td>项目介绍时什么都说，</td><td>就说些刚才让准备的一些，而且要有逻辑地说</td><td>会让面试官感觉你思路太乱</td></tr><tr><td>别太多介绍技术细节，就说你熟悉的技术</td><td>技术面点到为止，等面试官来问</td><td>你说到的所有技术要点，都可能会被深问。面试官一般会有自己的面试节奏，如果你在介绍时就太多说技术细节，很有可能被打断，从而没法说出你准备好的亮点。</td></tr></tbody></table><h3 id="3-不露痕迹地说出面试官爱听的话"><a href="#3-不露痕迹地说出面试官爱听的话" class="headerlink" title="3  不露痕迹地说出面试官爱听的话"></a>3  不露痕迹地说出面试官爱听的话</h3><pre><code>   在项目介绍的时候（当然包括后继的面试），面试官其实很想要听一些关键点，只要你说出来，而且回答相关问题比较好，这绝对是加分项。我在面试别人的时候，一旦这些关键点得到确认，我是绝对会在评语上加上一笔的。</code></pre><p>下面列些面试官爱听的关键点和对应的说辞。</p><table><thead><tr><th>关键点</th><th>说辞</th></tr></thead><tbody><tr><td>能考虑到代码的扩展性，有参与框架设计的意识</td><td>我的项目XX保险项目，用到SSH技术，数据库是Oracle，（这个是铺垫），开发的时候，我会先和项目经理一起设计框架，并参与了框架的构建，连接数据库的时候，我们用到了DAO，这样做的理由是，把SQL语句封装到DAO层，一旦要扩展功能模块，就可以不用做太多的改动。</td></tr><tr><td>有调优意识，能通过监控发现问题点，然后解决</td><td>在开发阶段，我就注意到内存的性能问题和SQL运行的时间问题，在压力测试阶段，我会通过xx工具来监控内存和数据库，发现待提升的代码点，然后通过查资料来优化。最后等项目上线后，我们会部署监控系统，一旦发现内存和数据库问题，我们会第一时间解决。</td></tr><tr><td>动手能力很强，肯干活，会的东西比较多，团队合作精神比较好</td><td>在项目里，我不仅要做开发的工作，而且需要自己测试，需要自己根据一些日志的输出到数据库或Java端去debug，当我开好一个模块时，需要自己部署到Linux上测试。或者，一旦遇到问题，如果是业务方面的，我会及时和项目经理沟通，如果是技术方面的，我会自己查资料，如果是测试方面的，我会及时和测试的人沟通。</td></tr><tr><td>责任心比较强，能适应大压力的环境</td><td>被问“你如果在项目里遇到问题怎么办？”回答：遇到问题我先查资料，如果实在没法解决，不会拖，会及时问相关的人，即使加班，也会在规定的时间内解决。</td></tr><tr><td>有主见，能不断探索新的知识</td><td>在项目里，我会在保证进度的前提下和项目经理说我的想法，提出我的解决方案。在开发过程中，我会先思考一下，用一种比较好的方式，比如效率最高的方法实现。另外你要找机会说出：平时我会不断看一些新技术（比如大数据Hadoop），会不断深入了解一些框架和技术的实现底层。</td></tr></tbody></table><h3 id="4-一定要主动，面试官没有义务挖掘你的亮点"><a href="#4-一定要主动，面试官没有义务挖掘你的亮点" class="headerlink" title="4  一定要主动，面试官没有义务挖掘你的亮点"></a>4  一定要主动，面试官没有义务挖掘你的亮点</h3><p>   我这样问已经是处于角色错位了，作为面试者，应当主动说出，而不是等着问，但请注意，说的时候要有技巧，找机会说，通常是找一些开放性的问题说。</p><pre><code>比如：在这个项目里用到了什么技术？你除了说一些基本的技术，比如Spring MVC，Hibernate，还有数据库方面的常规技术时，还得说，用到了Java内存管理，这样能减少对虚拟机内存的压力，或者说用到了大数据处理技术等。也就是说，得找一切机会说出你拿得出手的而且当前也非常热门的技术。或者找个相关的问题做扩展性说明，比如被问到：你有没有用到过一对多和多对多？你除了说基本知识点以外，还可以说，一般我还会根据需求适当地设置cascade和inverse关键字，随后通过一个实际的案例来说明合理设计对你项目的帮助，这样就能延伸性地说明你的技能了。相反如果你不说，面试话一定会认为你只会简单的一对一和一对多操作。</code></pre><p>   面试的时候，如果候选人回答问题很简单，有一说一，不会扩展，或者用非常吝啬的语句来回答我的问题，那么我一般会给机会让他们深入讲述（但我不敢保证不是每个面试官都会深入提问），如果回答再简洁，那么也会很吝啬地给出好的评语。</p><p>  记住：面试官不是你的亲戚，面试官很忙，能挖掘出你的亮点的面试官很少，而说出你的亮点是你的义务。</p><p>  我在面试别人过程中，根据不同的情况一般会给出如下的评语。</p><p>  1 回答很简单，但回答里能证明出他对框架等技术确实是做过，我会在评语里些“对框架了解一般，不知道一些深层次的知识（我都问了多次了你都回答很简答，那么对不起了，我只能这么写，或许你确实技术很强，那也没办法，谁让你不肯说呢？）”，同时会加一句“表达能力很一般，沟通能力不强”，这样即使他通过技术面试，后面的面试他也会很吃力。</p><p>  2 回答很简单，通过回答我没法验证他是在项目里做过这个技术，还是仅仅在平时学习中学过这个技术。我就会写“在简历中说用过XX技术，但对某些细节说不上来，没法看出在项目里用到这个技术”，如果这个技术是职务必需点，那么他通过面试的可能性就非常小。</p><p>  3 回答很简单，而且只通过嗯啊之类的虚词回答，经过提醒还这样，我会敷衍几句结束面试，直接写“技术很薄弱，没法通过面试”。</p><p>  4 虽然通过回答能很好地展示自己的技能，但逻辑调理不清晰，那么我会让他通过技术面试，但会写上“技能很好，但表达能力一般（或有待提高），请后继面试经理斟酌”。这样通过后继综合面试的机会就一般了，毕竟综合面试会着重考察表达能力交往能力等非技术因素。</p><p><strong>不管怎样，一旦回答简单，不主动说出你的擅长点，或没有条理很清楚地说出你的亮点，就算我让你通过面试，也不会写上“框架细节了解比较深，数据库应用比较熟练”等之类的好评语，你即使通过技术和后面的综合面试，工资也是比较低的。</strong></p><h3 id="5-一旦有低级错误，可能会直接出局"><a href="#5-一旦有低级错误，可能会直接出局" class="headerlink" title="5  一旦有低级错误，可能会直接出局"></a>5  一旦有低级错误，可能会直接出局</h3><p>   面试过程中有些方面你是绝对不能出错，所以你在准备过程中需要尤其注意如下的因素。下面列了些会导致你直接出局的错误回答。</p><table><thead><tr><th>错误类型</th><th>导致的后果</th></tr></thead><tbody><tr><td>前后矛盾，后面的回答无法证明你的项目描述，比如一开始说用到了Spring MVC，后面没法说出最基本的实现，比如不知道Spring有哪些类，或者没法说出项目的细节。</td><td>我会怀疑这个项目的真实性，我就会进一步问：数据库用什么，数据量多少？多少人做了多少时间，一旦再出现明显漏洞，比如一个小项目用到非常多的时间，那么就不仅仅是技术问题，而是在面试过程中企图“蒙混过关”的性质了。</td></tr><tr><td>项目里一定会用到的基本概念性问题都回答不上，Spring的依赖注入概念是什么，怎么用的，或者Hibernate的一对多怎么实现</td><td>一旦被我发现概念不知道，我就会通过更多问题确认，如果被我确认很弱，这就相当严重，因为技术能力差和技术没用过是两个截然不同的状况，技术没用过会导致直接出局。</td></tr><tr><td>面试时说出的工作经验和简历上的不一致</td><td>我会直接怀疑简历是编的，我会让候选人解释，即使是说简历写错了，我也会问比较深入的问题来核实他的技能和能力。</td></tr><tr><td>简历上的技能描述和回答出来的明显不一致，比如明明是只会简单的Linux，但吹得天花乱坠</td><td>我会通过一些比较深的问题核实其他技能，找出其他方面吹嘘的水分。所以建议，你可以适当夸张，但别过分，比如你在项目里没搭建框架但平时学习时搭建过，你可以写“XX项目的框架是你搭建的”，但你不能说你是一个架构师，非常了解项目的底层。</td></tr><tr><td>让面试官感觉你不稳定，很浮躁，比如说话不庄重，或者面试时打扮非常不正规，就穿背心来。</td><td>即使你技术再好，这个会可能导致你直接出局。我对油嘴滑舌的候选人一般会直接写上不好的评语，这样很难过后面项目经理的面试。我还遇到一个人，简历上工作是半年一换，我问他为什么经常换，他直接说是待遇问题，这个人我是直接Fail掉。</td></tr><tr><td>明说不能加班，不能出差</td><td>其实虽然有这一问，但公司里未必真的会加班会出差。但听到这类回答，说明这个人不能承受大压力的工作，或者责任心不强，大多数公司是不会要这种人的。</td></tr></tbody></table><h3 id="6-引导篇：准备些加分点，在介绍时有意提到，但别说全"><a href="#6-引导篇：准备些加分点，在介绍时有意提到，但别说全" class="headerlink" title="6  引导篇：准备些加分点，在介绍时有意提到，但别说全"></a>6  引导篇：准备些加分点，在介绍时有意提到，但别说全</h3><p>   在做项目介绍的时候，你可以穿插说出一些你的亮点，但请记得，不论在介绍项目还是在回答问题，你当前的职责不是说明亮点而是介绍项目，一旦你详细说，可能会让面试官感觉你跑题了。</p><p>   所以这时你可以一笔带过，比如你可以说，“我们的项目对数据要求比较大，忙的时候平均每小时要处理几十万条数据”，这样就可以把面试官引入“大数据”的方向。</p><p>   你在面试前可以根据职位的需求，准备好这种“一笔带过”的话。比如这个职位的需求点是Spring MVC框架，大数据高并发，要有数据库调优经验，那么介绍以往项目时，你就最好突出这些方面你的实际技能。</p><p>   再给大家举个例子，比如Java虚拟机内存管理和数据库优化是绝大多数项目都要遇到的两大问题，大家都可以在叙述项目经验时说，在这个项目里，我们需要考虑内存因素，因为我们的代码只允许在2G内存环境中运行，而且对数据库性能要求比较高，所以我们经常要监控优化内存和数据库里的SQL语句。这样当面试官深入提问时，就能抛出自己准备好的虚拟机内存优化和数据库优化方面的说辞。</p><p>实在不行，你也可以说“我除了做开发，也做了了解需求，测试和部署的工作，因为这个项目人手比较少，压力比较大”，这样你也能展示你有过独挡一面的经历。</p><p>我在面试过程中，一旦听到有亮点，就会等到他说好当前问题后，顺口去问，一般技术面试最多办半小时，你把时间用在回答准备好的问题点上的时候，被问其他问题的时间就会少了。 </p><h3 id="7-你可以引导，但不能自说自话"><a href="#7-你可以引导，但不能自说自话" class="headerlink" title="7  你可以引导，但不能自说自话"></a>7  你可以引导，但不能自说自话</h3><p>   我面试的时候，也会遇到些有准备的人，其实如果你真的想应聘的话，一定要事先准备，这点我能理解，甚至赞同，你只要别露出太明显的痕迹，我不会写上“似乎有准备，没法考察真实技能”这种话，更何况未必每个面试官都能感觉出你准备过。  但你不能凭着有准备而太强势，毕竟面试是面试官主导的。</p><p>   我遇到个别面试的人，他们说话太多，一般会主动扩展，比如我问他数据库用什么，他不仅回答数据库是什么，自己做了什么，甚至顺便会把大数据处理技术都说出来。</p><p>   其实过犹不及，我就会重点考察你说的每个细节，因为我怀疑你说的都是你从网上看的，而不是你项目中用到的，我甚至会直接威胁：“你先和我说实话这个技术你真在项目里用到，我后面会重点考察，一旦被认为你项目里没做，这个性质就是蒙混过关了”，往往这些人会主动坦白。</p><p>不过话说回来，他如果仅仅说，数据量比较大，但点到为止，不继续说后面的话，我就会深入去问，他自然有机会表达。同时请注意，一般在面试过程中，一旦你亮出加分点，但面试官没接嘴，这个加分点可能就不是项目必备的，也不是他所关注的，当前你就可以别再说了，或者等到你提问题的时候再说。    </p><h3 id="8-不是结尾的总结"><a href="#8-不是结尾的总结" class="headerlink" title="8  不是结尾的总结"></a>8  不是结尾的总结</h3><p>   到这里，我们已经给出了介绍项目的一些技巧，第一，面试前一定要准备，第二，本文给出是的方法，不是教条，大家可以按本文给出的方向结合自己的项目背景做准备，而不是死记硬背本文给出的一些说辞。</p><p>   当大家介绍好项目背景后，面试才刚刚开始，哪怕你说得再好，哪怕你把问题引导到你准备的范围里，这也得应付Java Web（比如Spring MVC,ORM等）、Java Core（多线程、集合、JDBC等）和数据库等方面的问题。</p><p>   那么本文的价值体现在哪呢？如果引导不好，你根本没机会展示自己的能力。这就是本文给出的方法价值所在。说句自夸的话，本文给出的一些方法和说辞不是拍脑袋想出来的，而是从面试上百个候选人的经历中抽取出来的，其中有不少血泪，也有不少人成功的途径，这篇文章多少对大家（尤其是经验不满3年的初级程序员）有帮助。</p>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 程序员成长 </tag>
            
            <tag> 项目经验介绍 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何健壮你的后端服务</title>
      <link href="/2019/01/29/ru-he-jian-zhuang-ni-de-hou-duan-fu-wu/"/>
      <url>/2019/01/29/ru-he-jian-zhuang-ni-de-hou-duan-fu-wu/</url>
      
        <content type="html"><![CDATA[<p>对每一个程序员而言，故障都是悬在头上的达摩克利斯之剑，都唯恐避之不及，如何避免故障是每一个程序员都在苦苦追寻希望解决的问题。对于这一问题，大家都可以从需求分析、架构设计 、代码编写、测试、code review、上线、线上服务运维等各个视角给出自己的答案。本人结合自己两年有限的互联网后端工作经验，从某几个视角谈谈自己对这一问题的理解，不足之处，望大家多多指出。</p><p>　我们大部分服务都是如下的结构，既要给使用方使用，又依赖于他人提供的第三方服务，中间又穿插了各种业务、算法、数据等逻辑，这里面每一块都可能是故障的来源。如何避免故障？我用一句话概括，“<strong>怀疑第三方，防备使用方，做好自己</strong>”。</p><p><img src="https://images0.cnblogs.com/blog2015/522490/201508/232008015194182.png" alt="img"></p><h3 id="1-怀疑第三方"><a href="#1-怀疑第三方" class="headerlink" title="1 怀疑第三方"></a>1 怀疑第三方</h3><p>　　坚持一条信念：“所有第三方服务都不可靠”，不管第三方什么天花乱坠的承诺。基于这样的信念，我们需要有以下行动。</p><h4 id="1-1-有兜底，制定好业务降级方案"><a href="#1-1-有兜底，制定好业务降级方案" class="headerlink" title="1.1 有兜底，制定好业务降级方案"></a>1.1 有兜底，制定好业务降级方案</h4><p>　　如果第三方服务挂掉怎么办？我们业务也跟着挂掉？显然这不是我们希望看到的结果，如果能制定好降级方案，那将大大提高服务的可靠性。举几个例子以便大家更好的理解。</p><p>　　比如我们做个性化推荐服务时，需要从用户中心获取用户的个性化数据，以便代入到模型里进行打分排序，但如果用户中心服务挂掉，我们获取不到数据了，那么就不推荐了？显然不行，我们可以在cache里放置一份热门商品以便兜底；</p><p>　　又比如做一个数据同步的服务，这个服务需要从第三方获取最新的数据并更新到mysql中，恰好第三方提供了两种方式：1）一种是消息通知服务，只发送变更后的数据；2）一种是http服务，需要我们自己主动调用获取数据。我们一开始选择消息同步的方式，因为实时性更高，但是之后就遭遇到消息迟迟发送不过来的问题，而且也没什么异常，等我们发现一天时间已过去，问题已然升级为故障。合理的方式应该两个同步方案都使用，消息方式用于实时更新，http主动同步方式定时触发（比如1小时）用于兜底，即使消息出了问题，通过主动同步也能保证一小时一更新。</p><p>　　有些时候第三方服务表面看起来正常，但是返回的数据是被污染的，这时还有什么方法兜底吗？有人说这个时候除了通知第三方快速恢复数据，基本只能干等了。举个例子，我们做移动端的检索服务，其中需要调用第三方接口获取数据来构建倒排索引，如果第三方数据出错，我们的索引也将出错，继而导致我们的检索服务筛选出错误的内容。第三方服务恢复数据最快要半小时，我们构建索引也需要半小时，即可能有超过1个多小时的时间检索服务将不能正常使用，这是不可接受的。如何兜底呢？我们采取的方法是每隔一段时间保存全量索引文件快照，一旦第三方数据源出现数据污染问题，我们先按下停止索引构建的开关，并快速回滚到早期正常的索引文件快照，这样尽管数据不是很新（可能1小时之前），但是至少能保证检索有结果，不至于对交易产生特别大的影响。</p><h4 id="1-2-遵循快速失败原则，一定要设置超时时间"><a href="#1-2-遵循快速失败原则，一定要设置超时时间" class="headerlink" title="1.2 遵循快速失败原则，一定要设置超时时间"></a>1.2 遵循快速失败原则，一定要设置超时时间</h4><p>　　某服务调用的一个第三方接口正常响应时间是50ms，某天该第三方接口出现问题，大约有15%的请求响应时间超过2s，没过多久服务load飙高到10以上，响应时间也非常缓慢，即第三方服务将我们服务拖垮了。</p><p>　　为什么会被拖垮？没设置超时！我们采用的是同步调用方式，使用了一个线程池，该线程池里最大线程数设置了50，如果所有线程都在忙，多余的请求就放置在队列里中。如果第三方接口响应时间都是50ms左右，那么线程都能很快处理完自己手中的活，并接着处理下一个请求，但是不幸的是如果有一定比例的第三方接口响应时间为2s，那么最后这50个线程都将被拖住，队列将会堆积大量的请求，从而导致整体服务能力极大下降。</p><p>　　正确的做法是和第三方商量确定个较短的超时时间比如200ms，这样即使他们服务出现问题也不会对我们服务产生很大影响。</p><h4 id="1-3-适当保护第三方，慎重选择重试机制"><a href="#1-3-适当保护第三方，慎重选择重试机制" class="headerlink" title="1.3 适当保护第三方，慎重选择重试机制"></a>1.3 适当保护第三方，慎重选择重试机制</h4><p>　　需要结合自己的业务以及异常来仔细斟酌是否使用重试机制。比如调用某第三方服务，报了个异常，有些同学就不管三七二十一就直接重试，这样是不对的，比如有些业务返回的异常表示业务逻辑出错，那么你怎么重试结果都是异常；又如有些异常是接口处理超时异常，这个时候就需要结合业务来判断了，有些时候重试往往会给后方服务造成更大压力，启到雪上加霜的效果。</p><h3 id="2-防备使用方"><a href="#2-防备使用方" class="headerlink" title="2 防备使用方"></a>2 防备使用方</h3><p>　　这里又要坚持一条信念：“所有的使用方都不靠谱”，不管使用方什么天花乱坠的保证。基于这样的信念，我们需要有以下行动。      </p><h4 id="2-1-设计一个好的api（RPC、Restful），避免误用"><a href="#2-1-设计一个好的api（RPC、Restful），避免误用" class="headerlink" title="2.1 设计一个好的api（RPC、Restful），避免误用"></a>2.1 设计一个好的api（RPC、Restful），避免误用</h4><p>　　过去两年间看过不少故障，直接或间接原因来自于糟糕的接口。如果你的接口让很多人误用，那要好好反思自己的接口设计了，接口设计虽然看着简单，但是学问很深，建议大家好好看看Joshua Bloch的演讲《How to Design a Good API &amp; Why it Matters（如何设计一个好的API及为什么这很重要）》</p><p>　　下面简单谈谈我的经验。</p><p><strong>a）</strong> <strong>遵循接口最少暴露原则</strong></p><p>　　使用方用多少接口我们就提供多少，因为提供的接口越多越容易出现乱用现象，言多必失嘛。此外接口暴露越多自己维护成本就越高。</p><p><strong>b）</strong> <strong>不要让使用方做接口可以做的事情</strong></p><p>　　如果使用方需要调用我们接口多次才能进行一个完整的操作，那么这个接口设计就可能有问题。比如获取数据的接口，如果仅仅提供getData(int id);接口，那么使用方如果要一次性获取20个数据，它就需要循环遍历调用我们接口20次，不仅使用方性能很差，也无端增加了我们服务的压力，这时提供getDataList(List<integer> idList);接口显然是必要的。</integer></p><p><strong>c</strong>）<strong>避免长时间执行的接口</strong></p><p>　　还是以获取数据方法为例：getDataList(List<integer> idList); 假设一个用户一次传1w个id进来，我们的服务估计没个几秒出不来结果，而且往往是超时的结果，用户怎么调用结果都是超时异常，那怎么办？限制长度，比如限制长度为100，即每次最多只能传100个id，这样就能避免长时间执行，如果用户传的id列表长度超过100就报异常。</integer></p><p>　　加了这样限制后，必须要让使用方清晰地知道这个方法有此限制。之前就遇到误用的情况，某用户一个订单买了超过100个商品，该订单服务需要调用商品中心接口获取该订单下所有商品的信息，但是怎么调用都失败，而且异常也没打出什么有价值的信息，后来排查好久才得知是商品中心接口做了长度限制。</p><p>　　怎么才能做到加了限制，又不让用户误用呢？</p><p>　　两种思路：1）接口帮用户做了分割调用操作，比如用户传了1w个id，接口内部分割成100个id列表（每个长度100），然后循环调用，这样对使用方屏蔽了内部机制，对使用方透明；2）让用户自己做分割，自己写循环显示调用，这样需要让用户知道我们方法做了限制，具体方法有：1）改变方法名，比如getDataListWithLimitLength(List<integer> idList); ；2）增加注释；3）如果长度超过 100，很明确地抛出异常，很直白地进行告知。</integer></p><p><strong>d</strong>）<strong>参数易用原则</strong></p><p>　　避免参数长度太长，一般超过3个后就较难使用，那有人说了我参数就是这么多，那怎么办？写个参数类嘛！</p><p>　　此外避免连续的同类型的参数，不然很容易误用。</p><p>　　能用其它类型如int等的尽量不要用String类型，这也是避免误用的方法。</p><p><strong>e）</strong> <strong>异常</strong></p><p>　　接口应当最真实的反应出执行中的问题，更不能用聪明的代码做某些特别处理。经常看到一些同学接口代码里一个try catch，不管内部抛了什么异常，捕获后返回空集合。</p><pre class=" language-java"><code class="language-java">`<span class="token keyword">public</span>` `List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>``        ``<span class="token keyword">try</span>` `<span class="token punctuation">{</span>``            ``<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>``        ``<span class="token punctuation">}</span> ``<span class="token keyword">catch</span>` `<span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span> <span class="token punctuation">{</span>``            ``<span class="token keyword">return</span>` `Collections<span class="token punctuation">.</span><span class="token function">emptyList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>``        ``<span class="token punctuation">}</span>``    ``<span class="token punctuation">}</span>`</code></pre><p>　　这让使用方很无奈，很多时候不知道是自己参数传的问题，还是服务方内部的问题，而一旦未知就可能误用了。</p><h4 id="2-2-流量控制，按服务分配流量，避免滥用"><a href="#2-2-流量控制，按服务分配流量，避免滥用" class="headerlink" title="2.2 流量控制，按服务分配流量，避免滥用"></a><strong>2.2 流量</strong>控制，按服务分配流量，避免滥用</h4><p>　　相信很多做过高并发服务的同学都碰到类似事件：某天A君突然发现自己的接口请求量突然涨到之前的10倍，没多久该接口几乎不可使用，并引发连锁反应导致整个系统崩溃。</p><p>　　为什么会涨10倍，难道是接口被外人攻击了，以我的经验看一般内部人“作案”可能性更大。之前还见过有同学mapreduce job调用线上服务，分分钟把服务搞死。</p><p>　　如何应对这种情况？生活给了我们答案：比如老式电闸都安装了保险丝，一旦有人使用超大功率的设备，保险丝就会烧断以保护各个电器不被强电流给烧坏。同理我们的接口也需要安装上“保险丝”，以防止非预期的请求对系统压力过大而引起的系统瘫痪，当流量过大时，可以采取拒绝或者引流等机制。</p><h3 id="3-做好自己"><a href="#3-做好自己" class="headerlink" title="3 做好自己"></a>3 做好自己</h3><p>　　做好自己是个非常大的话题，从需求分析、架构设计 、代码编写、测试、code review、上线、线上服务运维等阶段都可以重点展开介绍，这次简单分享下架构设计、代码编写上的几条经验原则。</p><h4 id="3-1-单一职责原则"><a href="#3-1-单一职责原则" class="headerlink" title="3.1 单一职责原则"></a>3.1 单一职责原则</h4><p>　　对于工作了两年以上的同学来说，设计模式应该好好看看，我觉得各种具体的设计模式其实并不重要，重要的是背后体现的原则。比如单一职责原则，在我们的需求分析、架构设计、编码等各个阶段都非常有指导意义。</p><p>　　在需求分析阶段，单一职责原则可以界定我们服务的边界，如果服务边界如果没界定清楚，各种合理的不合理的需求都接，最后导致服务出现不可维护、不可扩展、故障不断的悲哀结局。</p><p>　　对于架构来讲，单一职责也非常重要。比如读写模块放置在一起，导致读服务抖动非常厉害，如果读写分离那将大大提高读服务的稳定性（读写分离）；比如一个服务上同时包含了订单、搜索、推荐的接口，那么如果推荐出了问题可能影响订单的功能，那这个时候就可以将不同接口拆分为独立服务，并独立部署，这样一个出问题也不会影响其他服务（资源隔离）；又比如我们的图片服务使用独立域名、并放置到cdn上，与其它服务独立（动静分离）。</p><p>　　从代码角度上讲，一个类只干一件事情，如果你的类干了多个事情，就要考虑将他分开。这样做的好处是非常清晰，以后修改起来非常方便，对其它代码的影响就很小。再细粒度看类里的方法，一个方法也只干一个事情，即只有一个功能，如果干两件事情，那就把它分开，因为修改一个功能可能会影响到另一个功能。</p><h4 id="3-2-控制资源的使用"><a href="#3-2-控制资源的使用" class="headerlink" title="3.2 控制资源的使用"></a>3.2 控制资源的使用</h4><p>　　写代码脑子一定要绷紧一根弦，认知到我们所在的机器资源是有限的。机器资源有哪些？cpu、内存、网络、磁盘等，如果不做好保护控制工作，一旦某一资源满负荷，很容易导致出现线上问题。</p><h5 id="3-2-1-CPU资源怎么限制？"><a href="#3-2-1-CPU资源怎么限制？" class="headerlink" title="3.2.1 CPU资源怎么限制？"></a>3.2.1 CPU资源怎么限制？</h5><p><strong>a）计算算法优化</strong></p><p>　　如果服务需要进行大量的计算，比如推荐排序服务，那么务必对你的计算算法进行优化。</p><p><strong>b）锁</strong></p><p>　　对于很多服务而言，没有那么多耗费计算资源的算法，但cpu使用率也很高，这个时候需要看看锁的使用情况，我的建议是如无必要，尽量不用显式使用锁。</p><p><strong>c） 习惯问题</strong></p><p>　　比如写循环的时候，千万要检查看看是否能正确退出，有些时候一不小心，在某些条件下就成为死循环，很著名的案例就是《<a href="http://www.cnblogs.com/ITtangtang/p/3966467.html" target="_blank" rel="noopener">多线程下HashMap的死循环问题</a>》。比如集合遍历时候使用性能较差的遍历方式、String +检查，如果有超过多个String相加，是否使用StringBuffer.append？</p><p><strong>d）尽量使用线程池</strong></p><p>　　通过线程池来限制线程的数目，避免线程过多造成的线程上下文切换的开销。</p><p><strong>e）jvm参数调优</strong></p><p>　　jvm参数也会影响cpu的使用</p><h5 id="3-2-2-内存资源怎么限制？"><a href="#3-2-2-内存资源怎么限制？" class="headerlink" title="3.2.2 内存资源怎么限制？"></a>3.2.2 内存资源怎么限制？</h5><p><strong>a）Jvm参数设置</strong></p><p>　　通过JVM参数的设置来限制内存使用，jvm参数调优比较靠经验</p><p><strong>b）初始化java集合类大小</strong></p><p>　　使用java集合类的时候尽量初始化大小，在长连接服务等耗费内存资源的服务中这种优化非常重要；</p><p><strong>c）使用内存池/对象池</strong></p><p><strong>d）使用线程池的时候一定要设置队列的最大长度</strong></p><p>　　之前看过好多起故障都是由于队列最大长度没有限制最后导致内存溢出。</p><p><strong>e）如果数据较大避免使用本地缓存</strong></p><p>　　如果数据量较大，可以考虑放置到分布式缓存如redis、tair等，不然gc都可能把自己服务卡死；</p><p><strong>f）对缓存数据进行压缩</strong></p><p>　　比如之前做推荐相关服务时，需要保存用户偏好数据，如果直接保存可能有12G，后来采用短文本压缩算法直接压缩到6G，不过这时一定要考虑好压缩解压缩算法的cpu使用率、效率与压缩率的平衡，一些压缩率很高但是性能很差的算法，也不适合线上实时调用。</p><p>　　有些时候直接使用probuf来序列化之后保存，这样也能节省内存空间。</p><p><strong>g）清楚第三方软件实现细节，精确调优</strong></p><p>　　在使用第三方软件时，只有清楚细节后才知道怎么节约内存，这点我在实际工作中深有体会，比如之前在阅读过lucene的源码后发现我们的索引文件原来是可以压缩的，而这在说明文档中都找不到。</p><h5 id="3-2-3-网络资源怎么限制？"><a href="#3-2-3-网络资源怎么限制？" class="headerlink" title="3.2.3 网络资源怎么限制？"></a>3.2.3 <strong>网络资源怎么限制？</strong></h5><p><strong>a）减少调用的次数</strong>    </p><p>　　减少调用的次数？经常看到有同学在循环里用redis/tair的get，如果意识到这里面的网络开销的话就应该使用批量处理；又如在推荐服务中经常遇到要去多个地方去取数据，一般采用多线程并行去取数据，这个时候不仅耗费cpu资源，也耗费网络资源，一种在实际中常常采用的方法就是先将很多数据离线存储到一块 ，这时候线上服务只要一个请求就能将所有数据获取。</p><p><strong>b）减少传输的数据量</strong></p><p>　　一种方法是压缩后传输，还有一种就是按需传输，比如经常遇到的getData(int id)，如果我们返回该id对应的Data所有信息，一来人家不需要，二来数据量传输太大，这个时候可以改为getData(int id, List<string> fields)，使用方传输相应的字段过来，服务端只返回使用方需要的字段即可。</string></p><h5 id="3-2-4-磁盘资源怎么限制？"><a href="#3-2-4-磁盘资源怎么限制？" class="headerlink" title="3.2.4 磁盘资源怎么限制？"></a>3.2.4 <strong>磁盘资源怎么限制？</strong></h5><pre><code> 打日志要控制量，并定期清理。1）只打印关键的异常日志；2）对日志大小进行监控报警。我有一次就遇到了第三方服务挂了，然后我这边就不断打印调用该第三方服务异常的日志，本来我的服务有降级方案，如果第三方服务挂了会自动使用其它服务，但是突然收到报警说我服务挂了，登上机器一看才知道是磁盘不够导致的崩溃；3）定期对日志进行清理，比如用crontab，每隔几天对日志进行清理；4）打印日志到远端，对于一些比较重要的日志可以直接将日志打印到远端HDFS文件系统里；</code></pre><h4 id="3-3-避免单点"><a href="#3-3-避免单点" class="headerlink" title="3.3 避免单点"></a>3.3 避免单点</h4><p>　　不要把鸡蛋放在一个篮子上！从大层次上讲服务可以多机房部署、异地多活；从自己设计角度上讲，服务应该能做到水平扩展。</p><p>　　对于很多无状态的服务，通过nginx、zookeeper能轻松实现水平扩展；</p><p>　　对数据服务来说，怎么避免单点呢？简而言之、可以通过分片、分层等方式来实现，后面会有个博文总结。</p><h3 id="4-小结"><a href="#4-小结" class="headerlink" title="4 小结"></a>4 小结</h3><p>　　如何避免故障？我的经验浓缩为一句：“<strong>怀疑第三方，防备使用方，做好自己</strong>”，大家也可以思考、总结并分享下自己的经验。</p><p>原文地址：<a href="http://www.cnblogs.com/LBSer" target="_blank" rel="noopener">http://www.cnblogs.com/LBSer</a></p>]]></content>
      
      
      <categories>
          
          <category> 架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 系统设计 </tag>
            
            <tag> 架构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如果你在大学一开始就看了这篇文章，离开时已经是高级码农呢</title>
      <link href="/2019/01/29/ru-guo-ni-zai-da-xue-yi-kai-shi-jiu-kan-liao-zhe-pian-wen-zhang-chi-kai-shi-yi-jing-shi-gao-ji-ma-nong-ni/"/>
      <url>/2019/01/29/ru-guo-ni-zai-da-xue-yi-kai-shi-jiu-kan-liao-zhe-pian-wen-zhang-chi-kai-shi-yi-jing-shi-gao-ji-ma-nong-ni/</url>
      
        <content type="html"><![CDATA[<h2 id="如果大学里你一开始就看了这篇文，离开时已经是高级码农"><a href="#如果大学里你一开始就看了这篇文，离开时已经是高级码农" class="headerlink" title="如果大学里你一开始就看了这篇文，离开时已经是高级码农"></a>如果大学里你一开始就看了这篇文，离开时已经是高级码农</h2><p>作者知乎ID：三级狗</p><p>原文地址：<a href="https://zhuanlan.zhihu.com/p/38338888" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/38338888</a></p><blockquote><p><strong>如果嫌篇幅太长的，可以直接翻到最后看总结，那里言简意赅</strong></p></blockquote><p>先简单介绍一下我的情况：大概去年的这个时候从学校毕业，二本A软件工程，现在在北上广深之一的某卫星城从事互联网相关工作，月薪勉强养活自己。看上去一份很没说服力的简历，希望我下面的话，不会让你有这个感觉。</p><p>对于如何提升自己的编程能力。其他的回答中很多人都说了，这没什么捷径，就是多练，问题是并没有人说怎么练？一天敲50遍Hello Word算多练嘛？当然，各路大佬自然是知道该怎么练的，只是懒得在逼乎上浪费时间。我属于比较爱扯淡的，就在这里长篇大论的扯一波儿，不喜勿喷。</p><p><strong>首先、什么算你所谓的编程能力？</strong></p><p>我们对一项技能的掌握程度往往很难量化，对于编程能力的考量可能比较抽象，我们来类比比较直观的其他技能。比如说什么叫会弹吉他？我们说一个人吉他玩的好，这个人会弹吉他，是指他会弹《小星星》？还是会弹岸部真明的《time travel》？（力荐，好听！）恐怕都不是，我们对于会弹吉他的认知，应当是随手给他一个不熟悉的谱子，你也能很快的用吉他精彩的演奏，我们才说这个人吉他玩的真6。那编程也是，我们所希望的编程能力，指的是会写双向链表还是会写二叉树？恐怕都不是，<strong>我们所指的会编程，是指他在应对各种不同的业务需求时，都能很快的将业务逻辑转化成编程逻辑，并且编码实现的能力。</strong></p><p><strong>那么、如何来锻炼这种能力？</strong></p><p>前段时间在罗胖的《得到app》上听的一篇精品课，非常受启发。一位老师讲如何高效地学习一项技能，他用两年的时间就从零基础达到了专业级的弹指吉他大师的水平，他所使用的方法很值得借鉴。</p><p>内容大概是这样：</p><blockquote><p>他一开始接触吉他，没有从基础开始练，而是直接挑战难度极高的世界名曲开始演奏。可想而知这难度是极大的，没有任何基础的他，很多和弦都压不住。尤其对与刚玩吉他的人，十指连心啊，压弦的那只手是钻心的疼。一开始一句完整的都弹不下来，更别提什么扫弹，闷音，切音的技巧。就这样一节一节地弹，经过不懈的努力，他把这首曲子拿了下来。巨大的成就感是自然的，但对于优秀的渴望使得这位大佬感到仍然不能满足。怎么办呢？请教名师！这时候老师告诉他：“一禅呐！所谓知之者不如好之者、好之者不如乐之者，你现在已经能够从弹奏吉他中获得喜悦，现在，请再回过头，从基础开始学起。”这下子他才开始从最基础的乐理开始，什么叫节奏、什么叫旋律、什么叫音阶、什么 C 调 G 调 F 调。</p></blockquote><ul><li>原来之前练到手指快疼死的的指法叫 F 和弦？</li><li>原来之前的曲子里变调是这个意思？</li></ul><p>和上去就啃吉他基础教学不一样，这波儿基础的学习让他任督二脉蹭的一下就通了，仿佛杨过一身雄厚的内劲得黄药师点化一番，实力大增。不但能将那首世界名曲演绎的更加纯熟，对于其他没有演奏过乐曲，只要稍加练习，就能够德芙般顺滑地弹奏下来。</p><p>同样的方法，映射到编程上，就是我想说的学习方法。我很不建议一开始就从基础开始啃，有多少人从大一刚入学立志将来做一个IT大佬，抱着一本《C++ Primer》开始啃，最后啃不到 200 页就去 LOL 上分冲段位了。所以我的建议是，一开始只要会点儿基础语法，就定一个小目标去实现就好了，不必强求每一行代码都是亲自手写。遇到问题就查，百度也可以查书也可以，我一开始写个五子棋小游戏的时候，连数组的声明语法都是查书的。</p><blockquote><p><strong>把你遇到的问题从业务逻辑定位成代码逻辑，然后知道从哪儿可以找到想要的答案</strong></p></blockquote><p>这个能力在未来的工作、编程和面试中非常重要。一两个完整的程序做下来之后，再回过头来从变量、语法、表达式、流程控制、函数….重新去学习这门编程语言，这时候你会不断地发现原来这个地方这么写的原因是这样？原来这个地方是这么实现的，那个地方我还可以这么写。一本枯燥的语法书籍你会很流畅地读下来，甚至还可能读出快感和兴趣，这样一顿操作之后，你可以算真正掌握了一门编程语言，有了自己的理解在里面，并且有对应的应用经验，未来的面试中也可以讲的头头是道。</p><p><strong>这就引出下一个问题，选择什么样的程序作为上手项目</strong></p><ol><li>首先！是你做出来的程序，一定要好看！</li></ol><p>和语言没关系，不管是HTML+CSS还是Python还是C。我承认我是颜控，但这和个人癖好没什么关系。一个酷炫的UI设计将在很大程度上提升你的成就感以及你程序的品质。这里说的是品质，也就是逼格，用户体验好了，逼格上去了，自己的成就感油然而生，对于编程的兴趣也就上来了。下面上一波儿图来佐证一下我的观点：</p><ul><li>大一的时候用纯C语言做的五子棋，比较遗憾的是AI算法是整合网上别人的：</li></ul><p><img src="https://pic2.zhimg.com/80/v2-1aa1b89c7647066444f237db954aaf8d_hd.jpg" alt="img"></p><p><img src="https://pic3.zhimg.com/80/v2-18e9100f568c9d9c1eb3d80cfa524b22_hd.jpg" alt="img"></p><p>是纯C你没听错，有一个简单易用的函数库，叫做<code>easyx</code>可以了解一波。就按官网教程看几篇下来做成这样没有丝毫问题。当时课程设计，同学们看到这个程序佩服的和关老爷一样，老师也对我赞不绝口，毕竟在大家都用控制台画界面的时候，我具有划时代意义地用上了鼠标。只有我自己知道这其中只不过是些花拳绣腿。</p><ul><li>这个年代比较近了，使用了<code>C++ Qt</code>，王者荣耀风格的连连看：</li></ul><p><img src="https://pic4.zhimg.com/80/v2-abee323505be506824fd1d421b8aa5bf_hd.jpg" alt="img"></p><p><img src="https://pic2.zhimg.com/80/v2-d2d0bdfa5c1cc3c38d7a94e2423bf0c5_hd.jpg" alt="img"></p><p><img src="https://pic4.zhimg.com/80/v2-b90261ff49cc54457e944984b4d8eccf_hd.jpg" alt="img"></p><p><img src="https://pic4.zhimg.com/80/v2-ab40a109f59a6169740123339fb03d23_hd.jpg" alt="img"></p><ul><li>最后这个更亮了，得意之作也是毕业设计，准备擦亮眼：</li></ul><p>播放器主界面</p><p><img src="https://pic1.zhimg.com/80/v2-e8b06fa3199d9220ea94221d6fe45f78_hd.jpg" alt="img"></p><p>桌面歌词</p><p><img src="https://pic2.zhimg.com/80/v2-901a7632e6e528d1e9f39737085ef0b1_hd.jpg" alt="img"></p><p>手机遥控，同wifi下就可以遥控，还能定时关机</p><p><img src="https://pic1.zhimg.com/80/v2-20251c9b7b510d897f6b1cb550f4a224_hd.jpg" alt="img"></p><p>音乐魔方，旁边是酷狗的音乐魔方。有对比，才显的我更有逼格。</p><p><img src="https://pic3.zhimg.com/80/v2-a8d92475b19ceef717b78a66940542b6_hd.jpg" alt="img"></p><p>设置页面，很尴尬。这里都是假图，左侧五个按钮点击，右侧是五张图片来回换。-_-||</p><p><img src="https://pic4.zhimg.com/80/v2-2aab33eb447730fc11091f381593e4bf_hd.jpg" alt="img"></p><p>除了这还支持全局热键、播放MV、系统托盘等等。</p><p>如果你张大嘴哇了出来，就说明这些图片确实震撼到你了，试想如果你也把经手的程序做成这个样子，谁还会说对编程没兴趣？兴趣有了，动力就有了，项目搞完回过头来系统地学习语法基础，不但不再枯燥，而且理解也会更加深刻。</p><p>所以、做程序的时候想办法把程序做的漂亮一些，自己会P图就自己搞素材，自己不会就去网上下漂亮的UI素材整合到你的程序里，相信我、这些花拳绣腿不用花多大功夫就可以做到。</p><p>2.刚才说的是开发上手程序的建议的第一点，要好看。还有非常值得推荐的一点：把你的程序当做产品来看待。</p><p>当你把程序作为产品来看待的时候，你就会考虑到一个非常重要的因素：用户体验。假设你的产品要上线，是要给别人来用的一个程序。用户体验会倒逼你对你的程序作出一些调整和优化。有些调整优化力所能及，有些难度高到可能你实现不了，没关系，这对于你来说都将是成长很大的一步。在调整和优化的过程中，你的代码可能越改越乱，最后改不下去了，你会发现你的代码需要从底向上重新整理编写才能满足需求，恭喜你，这是编程能力提升的又一个重要阶段：Code refactoring 代码重构。无论重构的效果如何，一定会比上一个版本有所进步，这就是提升和成长。也将成为你编程经验中可贵的积累。</p><p>就以我刚才的音乐播放器为例，作为毕业设计已经绰绰有余，但是如果以产品的眼光来定位，它还存在着很多的问题，我大致记录如下：</p><p><img src="https://pic2.zhimg.com/80/v2-5e7bf73e02ea0dadc8eb10e0e63edd05_hd.jpg" alt="img"></p><p>随着我编程能力的提升，这些问题我在解决的过程中就发现，我的代码简直是一塌糊涂！现在存在的问题几乎到了不重构无法解决的地步。所以这个程序的重构后来被正式提上议程，并且因为我的懒惰成功搁浅了长达一年之久，现在还凉着… …</p><p><strong>学校学的东西到底还有没有用？</strong></p><p>编程能力的提升说完了，你可能会有这样的疑问了，学校学的东西还有用吗？好像按照我上面的办法自己学也能小有所成。</p><p>答案是毋庸置疑的，学校学的东西必然有用！</p><p>先来看看大学都学了什么？高数、大物、英语、C语言、数据结构、算法、计算机网络、计算机组成原理等等。显然，都是些既枯燥又复杂的知识，后来做了开发的大家都知道，这些东西很难直接应用在生产实际中，相反，很多互联网公司招聘，要求的是熟练使用各种框架,前端要vue，React，java要ssh，python要Django，C++要Qt等等，大学里不教，企业招聘又要，怎么办？这不是多了雨后春笋般的培训机构么…</p><p>甚至有人因此放出豪言壮语了：学校学的东西根本没卵用，不如早早学个流行的框架出去找工作。<br>难道说大学讲的东西真没用？既然这些东西我们工作中可能用不到，为什么学校还要讲？而不讲我们用得到的呢？我先来举几个实例：</p><p>1、你看到的大多数互联网公司招聘都要求熟悉这那的框架，但是越是大型互联网公司，比如BAT这种体量，学历要求是研究生到博士，数据结构和算法要求是精通，英语要求是6级。框架？不存在的，我招你进来很可能就是要参与开发我们自己的框架呢，你会用别人的框架用的再6也不是我想要的。</p><p>2、如果你研究人工智能领域的一些技术，机器学习、深度学习、神经网络什么的，一些似曾相识的名词开始映入眼帘：贝叶斯？逻辑回归？支持向量机？拉格朗日乘子法？数学让我寸步难行…</p><p>3、如果你学习前百度首席科学家吴恩达的全套机器学习课程，通篇没有说过一个中国字儿的，英语让我寸步难行…</p><p>4、答主之前接触过一款C++游戏引擎叫Cocos2d-x，设置一个小人跑酷，需要小人可以跑可以跳，自己会下落，可以碰撞检测。算坐标算的太麻烦，引入了一个叫Box2D的物理引擎。从此，小人的像前移动，变成了给小人设置一个像前的初速度。小人的自由掉落，变成了设置全局的重力加速度。小人的跳跃，变成了向上给一个初速度。碰撞检测变成了设置小人和物块为刚体，物理让我寸步难行。。。<br>5、答主一个朋友<br><a href="https://www.zhihu.com/people/67c546ed9d310fdc581e3cac66ffdafa" target="_blank" rel="noopener">@探索之言</a><br>在游戏行业做引擎优化和图像处理的，有一天跟我打电话，问我记不记得求空间中两个几何体相交截面的公式？我回了个黑人问号脸，后来他又打电话说起最近在做GPU编程，我为了不失逼格仍然不懂装懂的聊，他听出我啥也不懂，之后就再没给我打过电话了<br>（这里的应用场景是很常见的，在很多3D游戏的物体的投影，不全是投在地上的，有些投影会投在其他物体上，那这个时候显示出来的投影的样子，就是刚刚他问我的横截面。CS游戏中的喷漆也是这个原理。）</p><p>6、前段时间写一个贪吃蛇的小游戏，蛇的身体我封装成了一个类，每一个类放了另一个身体节点的指针，巧妙地实现了贪吃蛇的走步方式，我沾沾自喜地找同事炫耀我靠大脑创造出的高科技算法，被同事怼了回来：“这特么不是链表么？！”。</p><p>从上面的实例你应该已经能看出来了，<strong>说大学知识没用的那些人，不是因为大学知识真的没用，而是因为以他的能耐和眼光，还看不到大学知识用在什么地方。</strong>编程达到一些深度，开始需要自己造一些轮子用的时候，数据结构和算法是不掌握不行的，一些高精尖领域的研究，比如图像识别、大数据、人工智能等等，玩的全是数学。而我们所说的这框架那框架，全部是基于我们大学里学的知识基础封装出来的，当你对编程研究到一定深度的时候，大学里落下的基础，一样也跑不了。</p><p>这就是为什么说大学的东西不见得用得到，而大学还一定要讲，因为这些都是最基础最核心的东西。坦白讲，<strong>框架、编程语言都是用来解决问题的工具，工具用的好坏只能决定你跑的多块，而基础有多么牢固，才能决定你跑的多远。</strong></p><p><strong>未来你要成为怎样的程序员？</strong><br>这一点跟你的题目没太大关系了，作为程序员分享出来与大家共勉。</p><p><strong>这个世界上有两种人才，一种是所有的事情都知道一些，另一种是知道一些事情的所有，而这两者兼具的人，就成了我们口中的业界精英、行业翘楚。</strong></p><p>当然，成为翘楚光靠努力不够，还要一些运气和天赋，但这并不代表我们普通人不能向翘楚看齐，即使成不了精英，成为大佬还是有可能实现的。所以，对未来的规划，我的建议是从深度与广度两个维度来成长，定义好几个时间节点，在这些时间里就向这既定的目标来努力，如果中途感觉跑偏了，就回望初心，重新把自己划回正规。</p><p>就以我为例，我的大学基本是凉凉了，编程能力不错，但是成绩真的是有些不忍直视。我对自己明确的规划也是在快毕业的时候才有，那时候刚22岁，目标是在25岁之前，打造自己的广度，争取各个领域都有所涉猎有所了解，在25岁到28岁，选择一个自己喜欢的领域深入研究，打造自己的深度，争取在30岁之前，成为一个深度与广度兼具的大佬。在这期间，薪资不是我考虑的主要因素，薪资只是你个人能力的附属品（这话俺妈讲的）考虑的第一因素是成长。</p><p>扯得哲学点就是：<strong>不要着急花更多的时间去赚钱，去花时间，让自己的时间更值钱。</strong>当然，现在的我还差的很远。</p><p>鸡汤写完了，以上只是我的个人观点以及经验之谈，希望能对你，对其他在校的在职的程序猿有或多或少的帮助。<br>最后，还有很重要的一点，善于总结。定期回过头来看看，自己都学到了什么掌握了什么欠缺什么，也许你能从中淬炼出一些很有价值的东西，比如今天这篇鸡汤，总结如下：</p><ol><li><strong>知之者不如好之者，好之者不如乐之者。尝试引导自己对编程产生兴趣，从中获取成就感。</strong></li><li><strong>尝试从实践出发然后再回归到理论，就像上面提到的学吉他的方式方法。</strong></li><li><strong>做出来东西一定要好看，会更有成就感，更容易感兴趣。</strong></li><li><strong>用产品的眼光去定位你的作品，会得到更加意想不到的成长和进步。</strong></li><li><strong>会用工具，能决定你跑的多块，但基础多么牢靠，才决定你能跑多远！</strong></li><li><strong>这个世界上有两种人才，一种是所有的事情都知道一些，另一种是知道一些事情的所有，而这两者兼具的人，就成了我们口中的业界精英、行业翘楚。</strong></li><li><strong>不要着急花更多的时间去赚钱，去花时间，让自己的时间更值钱。</strong></li><li><strong>自己从实践中总结的才能叫真理，看别人说的只能叫鸡汤。</strong></li></ol>]]></content>
      
      
      <categories>
          
          <category> 猿说 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 如何学习 </tag>
            
            <tag> 程序员成长 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Quartz原理解密</title>
      <link href="/2019/01/29/quartz-yuan-li-jie-mi/"/>
      <url>/2019/01/29/quartz-yuan-li-jie-mi/</url>
      
        <content type="html"><![CDATA[<h1 id="Quartz原理解密"><a href="#Quartz原理解密" class="headerlink" title="Quartz原理解密"></a>Quartz原理解密</h1><blockquote><p>Author: Dorae<br>原文链接：<a href="https://juejin.im/post/5c3bf24951882523d3201c54?utm_source=gold_browser_extension" target="_blank" rel="noopener">https://juejin.im/post/5c3bf24951882523d3201c54?utm_source=gold_browser_extension</a></p></blockquote><h2 id="一、quartz概述"><a href="#一、quartz概述" class="headerlink" title="一、quartz概述"></a>一、quartz概述</h2><p>quartz是一个用java实现的开源任务调度框架，可以用来创建简单或者复杂的任务调度，并且可以提供许多企业级的功能，比如JTA以及集群等，是当今比较流行的JAVA任务调度框架。</p><h3 id="1-可以用来做什么"><a href="#1-可以用来做什么" class="headerlink" title="1. 可以用来做什么"></a>1. 可以用来做什么</h3><p>Quartz是一个任务调度框架，当遇到以下问题时：</p><ul><li>想在每月25号，自动还款；</li><li>想在每年4月1日给当年自己暗恋的女神发一封匿名贺卡；</li><li>想每隔1小时，备份一下自己的各种资料。</li></ul><p>那么总结起来就是，在一个有规律的时间点做一些事情，并且这个规律可以非常复杂，复杂到了需要一个框架来帮助我们。Quartz的出现就是为了解决这个问题，定义一个触发条件，那么其负责到了特定的时间点，触发相应的job干活。</p><h3 id="2-特点"><a href="#2-特点" class="headerlink" title="2. 特点"></a>2. 特点</h3><ul><li>强大的调度功能，例如丰富多样的调度方法，可以满足各种常规和特殊需求；</li><li>灵活的应用方式，比如支持任务调度和任务的多种组合，支持数据的多种存储（DB，RAM等；</li><li>支持分布式集群，在被Terracotta收购之后，在原来基础上进行了进一步的改造。</li></ul><h2 id="二、quartz基本原理"><a href="#二、quartz基本原理" class="headerlink" title="二、quartz基本原理"></a>二、quartz基本原理</h2><h3 id="1-核心元素"><a href="#1-核心元素" class="headerlink" title="1. 核心元素"></a>1. 核心元素</h3><p>Quartz核心要素有Scheduler、Trigger、Job、JobDetail，其中trigger和job、jobDetail为元数据，而Scheduler为实际进行调度的控制器。</p><ul><li>Trigger</li></ul><p>Trigger用于定义调度任务的时间规则，在Quartz中主要有四种类型的Trigger：SimpleTrigger、CronTrigger、DataIntervalTrigger和NthIncludedTrigger。</p><ul><li>Job&amp;Jodetail</li></ul><p>Quartz将任务分为Job、JobDetail两部分，其中Job用来定义任务的执行逻辑，而JobDetail用来描述Job的定义（例如Job接口的实现类以及其他相关的静态信息）。对Quartz而言，主要有两种类型的Job，StateLessJob、StateFulJob</p><ul><li>Scheduler</li></ul><p>实际执行调度逻辑的控制器，Quartz提供了DirectSchedulerFactory和StdSchedulerFactory等工厂类，用于支持Scheduler相关对象的产生。</p><h3 id="2-核心元素间关系"><a href="#2-核心元素间关系" class="headerlink" title="2. 核心元素间关系"></a>2. 核心元素间关系</h3><p><img src="https://user-gold-cdn.xitu.io/2019/1/14/1684a2a64cd7144c?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img"></p><h3 id="3-主要线程"><a href="#3-主要线程" class="headerlink" title="3. 主要线程"></a>3. 主要线程</h3><p>在Quartz中，有两类线程，也即执行线程和调度线程，其中执行任务的线程通常用一个线程池维护。线程间关系如图所示。</p><p><img src="https://user-gold-cdn.xitu.io/2019/1/14/1684a2a64b28e2da?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img"></p><p>在quartz中，Scheduler调度线程主要有两个：regular Scheduler Thread（执行常规调度）和Misfire Scheduler Thread（执行错失的任务）。其中Regular Thread 轮询Trigger，如果有将要触发的Trigger，则从任务线程池中获取一个空闲线程，然后执行与改Trigger关联的job；Misfire Thraed则是扫描所有的trigger，查看是否有错失的，如果有的话，根据一定的策略进行处理。</p><h3 id="4-数据存储"><a href="#4-数据存储" class="headerlink" title="4. 数据存储"></a>4. 数据存储</h3><p>Quartz中的trigger和job需要存储下来才能被使用。Quartz中有两种存储方式：RAMJobStore,JobStoreSupport，其中RAMJobStore是将trigger和job存储在内存中，而JobStoreSupport是基于jdbc将trigger和job存储到数据库中。RAMJobStore的存取速度非常快，但是由于其在系统被停止后所有的数据都会丢失，所以在集群应用中，必须使用JobStoreSupport。其中表结构如表所示。</p><table><thead><tr><th>Table name</th><th>Description</th></tr></thead><tbody><tr><td>QRTZ_CALENDARS</td><td>存储Quartz的Calendar信息</td></tr><tr><td>QRTZ_CRON_TRIGGERS</td><td>存储CronTrigger，包括Cron表达式和时区信息</td></tr><tr><td>QRTZ_FIRED_TRIGGERS</td><td>存储与已触发的Trigger相关的状态信息，以及相联Job的执行信息</td></tr><tr><td>QRTZ_PAUSED_TRIGGER_GRPS</td><td>存储已暂停的Trigger组的信息</td></tr><tr><td>QRTZ_SCHEDULER_STATE</td><td>存储少量的有关Scheduler的状态信息，和别的Scheduler实例</td></tr><tr><td>QRTZ_LOCKS</td><td>存储程序的悲观锁的信息</td></tr><tr><td>QRTZ_JOB_DETAILS</td><td>存储每一个已配置的Job的详细信息</td></tr><tr><td>QRTZ_SIMPLE_TRIGGERS</td><td>存储简单的Trigger，包括重复次数、间隔、以及已触的次数</td></tr><tr><td>QRTZ_BLOG_TRIGGERS</td><td>Trigger作为Blob类型存储</td></tr><tr><td>QRTZ_TRIGGERS</td><td>存储已配置的Trigger的信息</td></tr><tr><td>QRTZ_SIMPROP_TRIGGERS</td></tr></tbody></table><h2 id="三、quartz集群原理"><a href="#三、quartz集群原理" class="headerlink" title="三、quartz集群原理"></a>三、quartz集群原理</h2><p>一个Quartz集群中的每个节点是一个独立的Quartz应用，它又管理着其他的节点。这就意味着你必须对每个节点分别启动或停止。Quartz集群中，独立的Quartz节点并不与另一其的节点或是管理节点通信，而是通过相同的数据库表来感知到另一Quartz应用的，如图所示。</p><p><img src="https://user-gold-cdn.xitu.io/2019/1/14/1684a2a64b5a2943?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img"></p><h2 id="四、quartz主要流程"><a href="#四、quartz主要流程" class="headerlink" title="四、quartz主要流程"></a>四、quartz主要流程</h2><h3 id="1-启动流程"><a href="#1-启动流程" class="headerlink" title="1. 启动流程"></a>1. 启动流程</h3><p>若quartz是配置在spring中，当服务器启动时，就会装载相关的bean。SchedulerFactoryBean实现了InitializingBean接口，因此在初始化bean的时候，会执行afterPropertiesSet方法，该方法将会调用SchedulerFactory(DirectSchedulerFactory 或者 StdSchedulerFactory，通常用StdSchedulerFactory)创建Scheduler。SchedulerFactory在创建quartzScheduler的过程中，将会读取配置参数，初始化各个组件，关键组件如下：</p><ol><li><p><strong>ThreadPool</strong>:一般是使用SimpleThreadPool,SimpleThreadPool创建了一定数量的WorkerThread实例来使得Job能够在线程中进行处理。WorkerThread是定义在SimpleThreadPool类中的内部类，它实质上就是一个线程。在SimpleThreadPool中有三个list：workers-存放池中所有的线程引用，availWorkers-存放所有空闲的线程，busyWorkers-存放所有工作中的线程； 线程池的配置参数如下所示：</p><p>org.quartz.threadPool.class=org.quartz.simpl.SimpleThreadPool org.quartz.threadPool.threadCount=3 org.quartz.threadPool.threadPriority=5</p></li><li><p><strong>JobStore</strong>:分为存储在内存的RAMJobStore和存储在数据库的JobStoreSupport(包括JobStoreTX和JobStoreCMT两种实现，JobStoreCMT是依赖于容器来进行事务的管理，而JobStoreTX是自己管理事务），若要使用集群要使用JobStoreSupport的方式；</p></li><li><p><strong>QuartzSchedulerThread</strong>:用来进行任务调度的线程，在初始化的时候paused=true,halted=false,虽然线程开始运行了，但是paused=true，线程会一直等待，直到start方法将paused置为false；</p></li></ol><p>另外，SchedulerFactoryBean还实现了SmartLifeCycle接口，因此初始化完成后，会执行start()方法，该方法将主要会执行以下的几个动作：</p><ol><li>创建ClusterManager线程并启动线程:该线程用来进行集群故障检测和处理，将在下文详细讨论；</li><li>创建MisfireHandler线程并启动线程:该线程用来进行misfire任务的处理，将在下文详细讨论；</li><li>置QuartzSchedulerThread的paused=false，调度线程才真正开始调度；</li></ol><p>Quartz的整个启动流程如图所示。</p><p><img src="https://user-gold-cdn.xitu.io/2019/1/14/1684a2a64b6a1c91?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img"></p><h3 id="2-QuartzSchedulerThread线程"><a href="#2-QuartzSchedulerThread线程" class="headerlink" title="2. QuartzSchedulerThread线程"></a>2. QuartzSchedulerThread线程</h3><p>QuartzSchedulerThread线程是实际执行任务调度的线程，其中主要代码如下。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>halted<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> availThreadCount <span class="token operator">=</span> qsRsrcs<span class="token punctuation">.</span><span class="token function">getThreadPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">blockForAvailableThreads</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    triggers <span class="token operator">=</span> qsRsrcs<span class="token punctuation">.</span><span class="token function">getJobStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">acquireNextTriggers</span><span class="token punctuation">(</span>now <span class="token operator">+</span> idleWaitTime<span class="token punctuation">,</span>            Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>availThreadCount<span class="token punctuation">,</span> qsRsrcs<span class="token punctuation">.</span><span class="token function">getMaxBatchSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> qsRsrcs<span class="token punctuation">.</span><span class="token function">getBatchTimeWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> triggerTime <span class="token operator">=</span> triggers<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getNextFireTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> timeUntilTrigger <span class="token operator">=</span> triggerTime <span class="token operator">-</span> now<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>timeUntilTrigger <span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        now <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        timeUntilTrigger <span class="token operator">=</span> triggerTime <span class="token operator">-</span> now<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    List<span class="token operator">&lt;</span>TriggerFiredResult<span class="token operator">></span> bndle <span class="token operator">=</span> qsRsrcs<span class="token punctuation">.</span><span class="token function">getJobStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">triggersFired</span><span class="token punctuation">(</span>triggers<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> res<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        JobRunShell shell <span class="token operator">=</span> qsRsrcs<span class="token punctuation">.</span><span class="token function">getJobRunShellFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">createJobRunShell</span><span class="token punctuation">(</span>bndle<span class="token punctuation">)</span><span class="token punctuation">;</span>        shell<span class="token punctuation">.</span><span class="token function">initialize</span><span class="token punctuation">(</span>qs<span class="token punctuation">)</span><span class="token punctuation">;</span>        qsRsrcs<span class="token punctuation">.</span><span class="token function">getThreadPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">runInThread</span><span class="token punctuation">(</span>shell<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ol><li>先获取线程池中的可用线程数量（若没有可用的会阻塞，直到有可用的）；</li><li>获取30m内要执行的trigger(即acquireNextTriggers)： 获取trigger的锁，通过select …for update方式实现；获取30m内（可配置）要执行的triggers（需要保证集群节点的时间一致），若@ConcurrentExectionDisallowed且列表存在该条trigger则跳过，否则更新trigger状态为ACQUIRED(刚开始为WAITING)；插入firedTrigger表，状态为ACQUIRED;（注意：在RAMJobStore中，有个timeTriggers，排序方式是按触发时间nextFireTime排的；JobStoreSupport从数据库取出triggers时是按照nextFireTime排序）;</li><li>等待直到获取的trigger中最先执行的trigger在2ms内；</li><li>triggersFired：<ol><li>更新firedTrigger的status=EXECUTING;</li><li>更新trigger下一次触发的时间；</li><li>更新trigger的状态：无状态的trigger-&gt;WAITING，有状态的trigger-&gt;BLOCKED，若nextFireTime==null -&gt;COMPLETE；</li><li>commit connection,释放锁；</li></ol></li><li>针对每个要执行的trigger，创建JobRunShell，并放入线程池执行：<ol><li>execute:执行job</li><li>获取TRIGGER_ACCESS锁</li><li>若是有状态的job：更新trigger状态：BLOCKED-&gt;WAITING,PAUSED_BLOCKED-&gt;BLOCKED</li><li>若@PersistJobDataAfterExecution，则updateJobData</li><li>删除firedTrigger</li><li>commit connection，释放锁</li></ol></li></ol><p>调度线程的执行流程如图所示。</p><p><img src="https://user-gold-cdn.xitu.io/2019/1/14/1684a2a64b434d22?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img"></p><p>调度过程中Trigger状态变化如图所示。</p><p><img src="https://user-gold-cdn.xitu.io/2019/1/14/1684a2a64cff820c?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img"></p><h3 id="3-MisfireHandler线程"><a href="#3-MisfireHandler线程" class="headerlink" title="3. MisfireHandler线程"></a>3. MisfireHandler线程</h3><p>下面这些原因可能造成 misfired job:</p><ol><li>系统因为某些原因被重启。在系统关闭到重新启动之间的一段时间里，可能有些任务会被 misfire；</li><li>Trigger 被暂停（suspend）的一段时间里，有些任务可能会被 misfire；</li><li>线程池中所有线程都被占用，导致任务无法被触发执行，造成 misfire；</li><li>有状态任务在下次触发时间到达时，上次执行还没有结束；为了处理 misfired job，Quartz 中为 trigger 定义了处理策略，主要有下面两种：<ul><li>MISFIRE_INSTRUCTION_FIRE_ONCE_NOW：针对 misfired job 马上执行一次；</li><li>MISFIRE_INSTRUCTION_DO_NOTHING：忽略 misfired job，等待下次触发；默认是MISFIRE_INSTRUCTION_SMART_POLICY，该策略在CronTrigger中=MISFIRE_INSTRUCTION_FIRE_ONCE_NOW线程默认1分钟执行一次；在一个事务中，默认一次最多recovery 20个；</li></ul></li></ol><p>执行流程：</p><ol><li>若配置(默认为true，可配置)成获取锁前先检查是否有需要recovery的trigger，先获取misfireCount；</li><li>获取TRIGGER_ACCESS锁；</li><li>hasMisfiredTriggersInState：获取misfired的trigger，默认一个事务里只能最大20个misfired trigger（可配置），misfired判断依据：status=waiting,next_fire_time &lt; current_time-misfirethreshold(可配置，默认1min)</li><li>notifyTriggerListenersMisfired</li><li>updateAfterMisfire:获取misfire策略(默认是MISFIRE_INSTRUCTION_SMART_POLICY，该策略在CronTrigger中=MISFIRE_INSTRUCTION_FIRE_ONCE_NOW)，根据策略更新nextFireTime；</li><li>将nextFireTime等更新到trigger表；</li><li>commit connection，释放锁8.如果还有更多的misfired，sleep短暂时间(为了集群负载均衡)，否则sleep misfirethreshold时间，后继续轮询；</li></ol><p>misfireHandler线程执行流程如图所示：</p><p><img src="https://user-gold-cdn.xitu.io/2019/1/14/1684a2a66aa45772?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img"></p><h3 id="4-ClusterManager集群管理线程"><a href="#4-ClusterManager集群管理线程" class="headerlink" title="4. ClusterManager集群管理线程"></a>4. ClusterManager集群管理线程</h3><p>初始化：</p><p>failedInstance=failed+self+firedTrigger表中的schedulerName在scheduler_state表中找不到的（孤儿）</p><p>线程执行：</p><p>每个服务器会定时(org.quartz.jobStore.clusterCheckinInterval这个时间)更新SCHEDULER_STATE表的LAST_CHECKIN_TIME，若这个字段远远超出了该更新的时间，则认为该服务器实例挂了；</p><p>注意：每个服务器实例有唯一的id，若配置为AUTO，则为hostname+current_time</p><p>线程执行的具体流程：</p><ol><li>检查是否有超时的实例failedInstances;</li><li>更新该服务器实例的LAST_CHECKIN_TIME； 若有超时的实例：</li><li>获取STATE_ACCESS锁；</li><li>获取超时的实例failedInstances;</li><li>获取TRIGGER_ACCESS锁；</li><li>clusterRecover:<ul><li>针对每个failedInstances，通过instanceId获取每个实例的firedTriggers;</li><li>针对每个firedTrigger：<ul><li>更新trigger状态：<ul><li>BLOCKED-&gt;WAITING</li><li>PAUSED_BLOCKED-&gt;PAUSED</li><li>ACQUIRED-&gt;WAITING</li></ul></li><li>若firedTrigger不是ACQUIRED状态（在执行状态）,且jobRequestRecovery=true: 创建一个SimpleTrigger，存储到trigger表，status=waiting,MISFIRE_INSTR=MISFIRE_INSTRUCTION_IGNORE_MISFIRE_POLICY.</li><li>删除firedTrigger</li></ul></li></ul></li></ol><p>clusterManager线程执行时序图如图1-8所示：</p><p><img src="https://user-gold-cdn.xitu.io/2019/1/14/1684a2a66eee57d6?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img"></p><h2 id="五、注意问题"><a href="#五、注意问题" class="headerlink" title="五、注意问题"></a>五、注意问题</h2><ol><li><strong>时间同步问题</strong></li></ol><p>Quartz实际并不关心你是在相同还是不同的机器上运行节点。当集群放置在不同的机器上时，称之为水平集群。节点跑在同一台机器上时，称之为垂直集群。对于垂直集群，存在着单点故障的问题。这对高可用性的应用来说是无法接受的，因为一旦机器崩溃了，所有的节点也就被终止了。对于水平集群，存在着时间同步问题。</p><p>节点用时间戳来通知其他实例它自己的最后检入时间。假如节点的时钟被设置为将来的时间，那么运行中的Scheduler将再也意识不到那个结点已经宕掉了。另一方面，如果某个节点的时钟被设置为过去的时间，也许另一节点就会认定那个节点已宕掉并试图接过它的Job重运行。最简单的同步计算机时钟的方式是使用某一个Internet时间服务器(Internet Time Server ITS)。</p><ol><li><strong>节点争抢Job问题</strong></li></ol><p>因为Quartz使用了一个随机的负载均衡算法，Job以随机的方式由不同的实例执行。Quartz官网上提到当前，还不存在一个方法来指派(钉住) 一个 Job 到集群中特定的节点。</p><ol><li><strong>从集群获取Job列表问题</strong></li></ol><p>当前，如果不直接进到数据库查询的话，还没有一个简单的方式来得到集群中所有正在执行的Job列表。请求一个Scheduler实例，将只能得到在那个实例上正运行Job的列表。Quartz官网建议可以通过写一些访问数据库JDBC代码来从相应的表中获取全部的Job信息。</p>]]></content>
      
      
      <categories>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Quartz </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>日志脱敏</title>
      <link href="/2019/01/29/ri-zhi-tuo-min/"/>
      <url>/2019/01/29/ri-zhi-tuo-min/</url>
      
        <content type="html"><![CDATA[<blockquote><p> 本文首发于一个朋友的公众号： java界的小学生</p></blockquote><h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>在日常工作中，日志处理是我们每一个程序员必备的素质，但是在有些场景下客户信息敏感，需要进行某些字段，或者某部分字段的脱敏处理。接到需求我们开始操刀！</p><h3 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h3><p>处理字段的方式多种多样，如何方便，高效才是关键，众所周知在java中最好的处理方式就是封装，即，对程序员暴露出的最好是一个统一的<code>API</code>，不关心具体的处理逻辑，能拿到想要的返回值就好。</p><h3 id="实现第一版"><a href="#实现第一版" class="headerlink" title="实现第一版"></a>实现第一版</h3><p>由于在RPC调用过程当中，大部分接口的参数封装数据类型都是<code>Map</code>，所以在此先针对Map形式实现日志脱敏功能</p><h3 id="实现思路："><a href="#实现思路：" class="headerlink" title="实现思路："></a>实现思路：</h3><p>有两种实现方法：</p><pre class=" language-tex"><code class="language-tex">第一种：写死配置第二种：使用注解驱动由于写死配置的扩展性实在是差，所以我们本次实现主要是注解驱动</code></pre><h3 id="定义注解"><a href="#定义注解" class="headerlink" title="定义注解"></a>定义注解</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @ClassName: DesensitizedAnnotation * @Description: 注解类 * @Author: 尚先生 * @CreateDate: 2019/1/24 17:42 * @Version: 1.0 */</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span>ElementType<span class="token punctuation">.</span>METHOD<span class="token punctuation">,</span>ElementType<span class="token punctuation">.</span>FIELD<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Inherited</span><span class="token annotation punctuation">@Documented</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">DesensitizedAnnotation</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*脱敏数据类型(规则)*/</span>    TypeEnum <span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*判断注解是否生效，暂时没有用到*/</span>    String <span class="token function">isEffictiveMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="引入枚举"><a href="#引入枚举" class="headerlink" title="引入枚举"></a>引入枚举</h3><p>主要是便于统一处理同类型的字段</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span> TypeEnum <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**客户名称**/</span>    PERSON_NAME<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/**客户证件号**/</span>    PERSON_CERT_NO<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/**客户手机号**/</span>    PERSON_PHONE_NO<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/**客户银行卡名称**/</span>    PERSON_BANK_NAME<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/**客户银行卡号**/</span>    PERSON_BANK_NO<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/**密码**/</span>    PASSWORD<span class="token punctuation">,</span><span class="token punctuation">}</span></code></pre><h3 id="定义基本数据模板类"><a href="#定义基本数据模板类" class="headerlink" title="定义基本数据模板类"></a>定义基本数据模板类</h3><p>主要作用是定义待过滤字段集合</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @ClassName: BaseInfo * @Description: 日志过滤字段基类 * @Author: 尚先生 * @CreateDate: 2019/1/24 17:38 * @Version: 1.0 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BaseInfo</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 1L<span class="token punctuation">;</span>    <span class="token annotation punctuation">@DesensitizedAnnotation</span><span class="token punctuation">(</span>type <span class="token operator">=</span> TypeEnum<span class="token punctuation">.</span>PERSON_NAME<span class="token punctuation">)</span>    <span class="token keyword">private</span> String custName<span class="token punctuation">;</span>    <span class="token annotation punctuation">@DesensitizedAnnotation</span><span class="token punctuation">(</span>type <span class="token operator">=</span> TypeEnum<span class="token punctuation">.</span>PERSON_CERT_NO<span class="token punctuation">)</span>    <span class="token keyword">private</span> String certNo<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="定义处理工具类"><a href="#定义处理工具类" class="headerlink" title="定义处理工具类"></a>定义处理工具类</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @ClassName: DesensitizedUtils * @Description: 日志脱敏工具类 * @Author: 尚先生 * @CreateDate: 2019/1/24 17:52 * @Version: 1.0 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DesensitizedUtils</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Logger logger <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>DesensitizedUtils<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> TypeEnum<span class="token operator">></span> annotationMaps <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 类加载时装配待脱敏字段     */</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> clazz <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>BaseInfo<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Field<span class="token punctuation">[</span><span class="token punctuation">]</span> fields <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> fields<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                fields<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                DesensitizedAnnotation annotation <span class="token operator">=</span> fields<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span>DesensitizedAnnotation<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>annotation <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    TypeEnum type <span class="token operator">=</span> annotation<span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    String name <span class="token operator">=</span> fields<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//name为注解字段名称，value为注解类型。方便后续根据注解类型扩展</span>                    annotationMaps<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> type<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"类加载时装配待脱敏字段异常，异常信息:[{}]"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>e<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 脱敏处理方法     *     * @param object     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">getConverent</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span> object<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 1.处理Map数据类型</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>object <span class="token keyword">instanceof</span> <span class="token class-name">Map</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                HashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> reqMap <span class="token operator">=</span> <span class="token punctuation">(</span>HashMap<span class="token punctuation">)</span> object<span class="token punctuation">;</span>                Iterator<span class="token operator">&lt;</span>String<span class="token operator">></span> iterator <span class="token operator">=</span> annotationMaps<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                iterator<span class="token punctuation">.</span><span class="token function">forEachRemaining</span><span class="token punctuation">(</span>annotationName <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>reqMap<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>annotationName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token function">doconverentForMap</span><span class="token punctuation">(</span>reqMap<span class="token punctuation">,</span> annotationName<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>reqMap<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>                  <span class="token keyword">return</span> JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"日志脱敏处理失败，回滚，详细信息:[{}]"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>e<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 脱敏数据源为Map时处理方式     *     * @param reqMap     * @param annotationName     * @return     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">doconverentForMap</span><span class="token punctuation">(</span>HashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> reqMap<span class="token punctuation">,</span> String annotationName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String value <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>reqMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>annotationName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            value <span class="token operator">=</span> <span class="token function">doConverentByType</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> annotationName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        reqMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>annotationName<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 根据不同注解类型处理不同字段     *     * @param value     * @param annotationName     * @return     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> String <span class="token function">doConverentByType</span><span class="token punctuation">(</span>String value<span class="token punctuation">,</span> String annotationName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        TypeEnum typeEnum <span class="token operator">=</span> annotationMaps<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>annotationName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>typeEnum<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> PERSON_NAME<span class="token operator">:</span>                value <span class="token operator">=</span> <span class="token function">getStringByLength</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> PERSON_CERT_NO<span class="token operator">:</span>                value <span class="token operator">=</span> <span class="token function">getStringByLength</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">default</span><span class="token operator">:</span>                value <span class="token operator">=</span> <span class="token function">getStringByLength</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> value<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 根据value长度取值(切分)     *     * @param value     * @return     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> String <span class="token function">getStringByLength</span><span class="token punctuation">(</span>String value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> length <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>length <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            value <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"*"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>length <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            value <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"*"</span> <span class="token operator">+</span> value<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>length <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>length <span class="token operator">></span> <span class="token number">3</span> <span class="token operator">&amp;&amp;</span> length <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            value <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"**"</span> <span class="token operator">+</span> value<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>length <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>length <span class="token operator">></span> <span class="token number">5</span> <span class="token operator">&amp;&amp;</span> length <span class="token operator">&lt;=</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            value <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"***"</span> <span class="token operator">+</span> value<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>length <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>length <span class="token operator">></span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            value <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"*****"</span> <span class="token operator">+</span> value<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>length <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> value<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="定义测试类"><a href="#定义测试类" class="headerlink" title="定义测试类"></a>定义测试类</h3><p>测试第一版实现的针对Map处理的脱敏操作</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @ClassName: TestDeaensitized * @Description: 日志脱敏测试类 * @Author: 尚先生 * @CreateDate: 2019/1/24 18:27 * @Version: 1.0 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestDeaensitized</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        HashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> hashMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        hashMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"custName"</span><span class="token punctuation">,</span> <span class="token string">"小妮儿"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        hashMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"certNo"</span><span class="token punctuation">,</span> <span class="token string">"12345678909876543"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        hashMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"phone"</span><span class="token punctuation">,</span> <span class="token string">"12345678909"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"脱敏前："</span> <span class="token operator">+</span> hashMap<span class="token punctuation">)</span><span class="token punctuation">;</span>        String converent1 <span class="token operator">=</span> DesensitizedUtils<span class="token punctuation">.</span><span class="token function">getConverent</span><span class="token punctuation">(</span>hashMap<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"脱敏后："</span> <span class="token operator">+</span> converent1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="第一版实现测试结果"><a href="#第一版实现测试结果" class="headerlink" title="第一版实现测试结果"></a>第一版实现测试结果</h3><pre class=" language-tex"><code class="language-tex">针对Map实现的脱敏结果脱敏前：{certNo=12345678909876543, phone=12345678909, custName=小妮儿}脱敏后：{"certNo":"123*****543","phone":"12345678909","custName":"小*儿"}</code></pre><p>至此第一版功能实现顺利完成。</p><h3 id="实现第二版"><a href="#实现第二版" class="headerlink" title="实现第二版"></a>实现第二版</h3><p>由于在<code>RPC</code>调用过程当中，大部分接口的参数封装数据类型都是<code>Map</code>，但是部分接口还是使用<code>Java Bean</code>所以在此针对<code>Java Bean</code>形式实现日志脱敏功能</p><h3 id="实现思路：-1"><a href="#实现思路：-1" class="headerlink" title="实现思路："></a>实现思路：</h3><pre class=" language-tex"><code class="language-tex">根据不同的数据类型进行不同判断，屏蔽上层调用者的可见度，在底层动态实现分情况处理在结果处理完之后，统一返回调用者序列化完成的数据信息</code></pre><p>在第一版实现的基础之上，我们开始第二版的实现</p><h3 id="添加实体类"><a href="#添加实体类" class="headerlink" title="添加实体类"></a>添加实体类</h3><p>主要是为了封装模拟RPC调用过程中参数实体的属性</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @ClassName: Person * @Description: Person实体类 * @Author: 尚先生 * @CreateDate: 2019/1/24 17:50 * @Version: 1.0 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String custName<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> idNo<span class="token punctuation">;</span>    <span class="token keyword">private</span> String certNo<span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getCustName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> custName<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCustName</span><span class="token punctuation">(</span>String custName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>custName <span class="token operator">=</span> custName<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getIdNo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> idNo<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setIdNo</span><span class="token punctuation">(</span><span class="token keyword">int</span> idNo<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>idNo <span class="token operator">=</span> idNo<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getCertNo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> certNo<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCertNo</span><span class="token punctuation">(</span>String certNo<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>certNo <span class="token operator">=</span> certNo<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Person{"</span> <span class="token operator">+</span>                <span class="token string">"custName='"</span> <span class="token operator">+</span> custName <span class="token operator">+</span> <span class="token string">''</span>' <span class="token operator">+</span>                <span class="token string">", idNo="</span> <span class="token operator">+</span> idNo <span class="token operator">+</span>                <span class="token string">", certNo='"</span> <span class="token operator">+</span> certNo <span class="token operator">+</span> <span class="token string">''</span>' <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="改造处理工具类"><a href="#改造处理工具类" class="headerlink" title="改造处理工具类"></a>改造处理工具类</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @ClassName: DesensitizedUtils * @Description: 日志脱敏工具类 * @Author: 尚先生 * @CreateDate: 2019/1/24 17:52 * @Version: 1.0 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DesensitizedUtils</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Logger logger <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>DesensitizedUtils<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> TypeEnum<span class="token operator">></span> annotationMaps <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 类加载时装配待脱敏字段     */</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> clazz <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>BaseInfo<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Field<span class="token punctuation">[</span><span class="token punctuation">]</span> fields <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> fields<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                fields<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                DesensitizedAnnotation annotation <span class="token operator">=</span> fields<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span>DesensitizedAnnotation<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>annotation <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    TypeEnum type <span class="token operator">=</span> annotation<span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    String name <span class="token operator">=</span> fields<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//name为注解字段名称，value为注解类型。方便后续根据注解类型扩展</span>                    annotationMaps<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> type<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"类加载时装配待脱敏字段异常，异常信息:[{}]"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>e<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 脱敏处理方法     *     * @param object     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">getConverent</span><span class="token punctuation">(</span>Object object<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String objClassName <span class="token operator">=</span> object<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 1.处理Map数据类型</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>object <span class="token keyword">instanceof</span> <span class="token class-name">Map</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                HashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> reqMap <span class="token operator">=</span> <span class="token punctuation">(</span>HashMap<span class="token punctuation">)</span> object<span class="token punctuation">;</span>                Iterator<span class="token operator">&lt;</span>String<span class="token operator">></span> iterator <span class="token operator">=</span> annotationMaps<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                iterator<span class="token punctuation">.</span><span class="token function">forEachRemaining</span><span class="token punctuation">(</span>annotationName <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>reqMap<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>annotationName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token function">doconverentForMap</span><span class="token punctuation">(</span>reqMap<span class="token punctuation">,</span> annotationName<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>reqMap<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 2.处理Object数据类型</span>            Object val <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> objClazz <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>objClassName<span class="token punctuation">)</span><span class="token punctuation">;</span>            Field<span class="token punctuation">[</span><span class="token punctuation">]</span> declaredFields <span class="token operator">=</span> objClazz<span class="token punctuation">.</span><span class="token function">getDeclaredFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> declaredFields<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                Iterator<span class="token operator">&lt;</span>String<span class="token operator">></span> iterator <span class="token operator">=</span> annotationMaps<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    String annotationName <span class="token operator">=</span> iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>declaredFields<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>annotationName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        declaredFields<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        val <span class="token operator">=</span> declaredFields<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">//获取属性后现在默认处理的是String类型，其他类型数据可扩展</span>                        String value <span class="token operator">=</span> <span class="token function">doconverentForObject</span><span class="token punctuation">(</span>val<span class="token punctuation">,</span> annotationName<span class="token punctuation">)</span><span class="token punctuation">;</span>                        declaredFields<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>object<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"日志脱敏处理失败，回滚，详细信息:[{}]"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>e<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 脱敏数据源为Object时处理方式     *     * @param val     * @param annotationName     * @return     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> String <span class="token function">doconverentForObject</span><span class="token punctuation">(</span>Object val<span class="token punctuation">,</span> String annotationName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String value <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            value <span class="token operator">=</span> <span class="token function">doConverentByType</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> annotationName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> value<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 脱敏数据源为Map时处理方式     *     * @param reqMap     * @param annotationName     * @return     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">doconverentForMap</span><span class="token punctuation">(</span>HashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> reqMap<span class="token punctuation">,</span> String annotationName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String value <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>reqMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>annotationName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            value <span class="token operator">=</span> <span class="token function">doConverentByType</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> annotationName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        reqMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>annotationName<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 根据不同注解类型处理不同字段     *     * @param value     * @param annotationName     * @return     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> String <span class="token function">doConverentByType</span><span class="token punctuation">(</span>String value<span class="token punctuation">,</span> String annotationName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        TypeEnum typeEnum <span class="token operator">=</span> annotationMaps<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>annotationName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>typeEnum<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> PERSON_NAME<span class="token operator">:</span>                value <span class="token operator">=</span> <span class="token function">getStringByLength</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> PERSON_CERT_NO<span class="token operator">:</span>                value <span class="token operator">=</span> <span class="token function">getStringByLength</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">default</span><span class="token operator">:</span>                value <span class="token operator">=</span> <span class="token function">getStringByLength</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> value<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 根据value长度取值(切分)     *     * @param value     * @return     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> String <span class="token function">getStringByLength</span><span class="token punctuation">(</span>String value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> length <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>length <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            value <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"*"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>length <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            value <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"*"</span> <span class="token operator">+</span> value<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>length <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>length <span class="token operator">></span> <span class="token number">3</span> <span class="token operator">&amp;&amp;</span> length <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            value <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"**"</span> <span class="token operator">+</span> value<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>length <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>length <span class="token operator">></span> <span class="token number">5</span> <span class="token operator">&amp;&amp;</span> length <span class="token operator">&lt;=</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            value <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"***"</span> <span class="token operator">+</span> value<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>length <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>length <span class="token operator">></span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            value <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"*****"</span> <span class="token operator">+</span> value<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>length <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> value<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="定义测试类-1"><a href="#定义测试类-1" class="headerlink" title="定义测试类"></a>定义测试类</h3><p>测试第二版实现的针对Object处理的脱敏操作</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @ClassName: TestDeaensitized * @Description: 日志脱敏测试类 * @Author: 尚先生 * @CreateDate: 2019/1/24 18:27 * @Version: 1.0 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestDeaensitized</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        HashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> hashMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        hashMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"custName"</span><span class="token punctuation">,</span> <span class="token string">"小妮儿"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        hashMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"certNo"</span><span class="token punctuation">,</span> <span class="token string">"12345678909876543"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        hashMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"phone"</span><span class="token punctuation">,</span> <span class="token string">"12345678909"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"脱敏前："</span> <span class="token operator">+</span> hashMap<span class="token punctuation">)</span><span class="token punctuation">;</span>        String converent1 <span class="token operator">=</span> DesensitizedUtils<span class="token punctuation">.</span><span class="token function">getConverent</span><span class="token punctuation">(</span>hashMap<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"脱敏后："</span> <span class="token operator">+</span> converent1<span class="token punctuation">)</span><span class="token punctuation">;</span>        Person person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        person<span class="token punctuation">.</span><span class="token function">setCertNo</span><span class="token punctuation">(</span><span class="token string">"12345678909876541"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        person<span class="token punctuation">.</span><span class="token function">setCustName</span><span class="token punctuation">(</span><span class="token string">"小妮儿真可爱！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"脱敏前："</span> <span class="token operator">+</span> person<span class="token punctuation">)</span><span class="token punctuation">;</span>        String converent2 <span class="token operator">=</span> DesensitizedUtils<span class="token punctuation">.</span><span class="token function">getConverent</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"脱敏后："</span> <span class="token operator">+</span> converent2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="第二版实现测试结果"><a href="#第二版实现测试结果" class="headerlink" title="第二版实现测试结果"></a>第二版实现测试结果</h3><pre class=" language-tex"><code class="language-tex">针对Map实现的脱敏结果脱敏前：{certNo=12345678909876543, phone=12345678909, custName=小妮儿}脱敏后：{"certNo":"123*****543","phone":"12345678909","custName":"小*儿"}针对Object实现的脱敏结果脱敏前：Person{custName='小妮儿真可爱！', idNo=0, certNo='12345678909876541'}脱敏后：{"certNo":"123*****541","custName":"小妮***爱！","idNo":0}</code></pre><p>至此所有功能实现顺利完成。</p><blockquote><p>完整代码请参考Github</p><pre><code>https://github.com/dwyanewede/project-learn/tree/master/src/main/java/com/learn/demo/desensitization</code></pre><p>博客链接：</p><pre><code>https://blog.csdn.net/shang_xs/article/details/86632071</code></pre></blockquote>]]></content>
      
      
      <categories>
          
          <category> 日志 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> SpringBoot </tag>
            
            <tag> 自定义注解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>EveryThing如何用到极致？</title>
      <link href="/2019/01/29/everything-ru-he-yong-dao-ji-zhi/"/>
      <url>/2019/01/29/everything-ru-he-yong-dao-ji-zhi/</url>
      
        <content type="html"><![CDATA[<p><img src="https://upload-images.jianshu.io/upload_images/2346551-cf440b8ac3c91878.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000/format/webp" alt="Everything是国民最爱软件"></p><hr><p>摘要：Everything几乎是每个职场人必备的效率工具，但同事们都只用它的一两个基本功能，并没有发挥出该软件的真正效率。实际上，把Everything的功能用到极致能够成倍的提升我们的工作效率，本文尝试详述那些藏在角落里的功能，帮您把它的潜力发挥到极致。</p><hr><h2 id="0-Everything的前世今生"><a href="#0-Everything的前世今生" class="headerlink" title="0. Everything的前世今生"></a>0. Everything的前世今生</h2><p>Everything是澳大利亚人David Carpenter开发的免费文件检索工具，自从问世以来，因其占用内存小，搜索迅捷，获得了全世界windows用户的追捧，是职场同仁们必备的利器。拿我自己来说吧，我的电脑里有60万个文件夹和文件，如果没有everything，我不知道找到需要的文件要多么痛苦。</p><p>下面我们就按使用场景说说Everything的用法。</p><h2 id="1-Everything的使用场景"><a href="#1-Everything的使用场景" class="headerlink" title="1. Everything的使用场景"></a>1. Everything的使用场景</h2><h3 id="1-1-搜索包含某个关键词的文件名，怎么办？"><a href="#1-1-搜索包含某个关键词的文件名，怎么办？" class="headerlink" title="1.1 搜索包含某个关键词的文件名，怎么办？"></a>1.1 搜索包含某个关键词的文件名，怎么办？</h3><p>这个是同学们最常用的功能了，即在搜索框输入你要查询的关键字，例如，我想查询包含coffee到文件名，就直接在搜索框里输入coffee，就可以了，效果如下。</p><p><img src="https://upload-images.jianshu.io/upload_images/2346551-9a40981c21bca250.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/848/format/webp" alt="搜索包含coffee的文件名"></p><h3 id="1-2-要搜索的文件名中同时包含多个关键词怎么办？"><a href="#1-2-要搜索的文件名中同时包含多个关键词怎么办？" class="headerlink" title="1.2 要搜索的文件名中同时包含多个关键词怎么办？"></a>1.2 要搜索的文件名中同时包含多个关键词怎么办？</h3><p>如果想搜索的文件名中同时包含多个关键词，可以在搜索框中顺序敲入那几个关键词，中间用空格分开，例如包含hpe和win的文件，可以输入hpe然后跟着一个空格，然后输入win，结果如下图所示：</p><p><img src="https://upload-images.jianshu.io/upload_images/2346551-2c11dab4b349e415.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/844/format/webp" alt="搜索包含两个关键词的文件名"></p><p>但这种方法查出来的结果文件，名字中的关键词出现的顺序不一定是你输入的关键词的顺序。如果你想查询的结果必须按照你输入的顺序，可以使用<em>关键词</em>关键词<em>的方式。例如，</em>hpe<em>win</em>，你看，下面出现的结果，都是hpe在前，win在后的文件名。</p><p><img src="https://upload-images.jianshu.io/upload_images/2346551-e0ba4b2e70cbe26d.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/845/format/webp" alt=""></p><p>另一种输入多关键词的方法，可以确保结果中关键词的顺序</p><h3 id="1-3-想要搜索的文件名中包含多个关键词中的一个就可以，怎么办？"><a href="#1-3-想要搜索的文件名中包含多个关键词中的一个就可以，怎么办？" class="headerlink" title="1.3 想要搜索的文件名中包含多个关键词中的一个就可以，怎么办？"></a>1.3 想要搜索的文件名中包含多个关键词中的一个就可以，怎么办？</h3><p>如果我想查询的文件名中，包含关键词1，<strong>或</strong>，包含关键词二，可以在两个关键词中间加竖线（注意竖线前后都有空格），例如coffee | orange</p><p><img src="https://upload-images.jianshu.io/upload_images/2346551-95f7f5b6385d0833.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/860/format/webp" alt=""></p><p>两个关键词满足一个就可以，使用“或”的关系</p><h3 id="1-4-只搜索目录名，不想要文件名怎么办？"><a href="#1-4-只搜索目录名，不想要文件名怎么办？" class="headerlink" title="1.4 只搜索目录名，不想要文件名怎么办？"></a>1.4 只搜索目录名，不想要文件名怎么办？</h3><p>如果只想显示符合条件的目录，鼠标点选右上角的下拉框，把显示范围从Everything（全部），改为folder（文件夹）</p><p><img src="https://upload-images.jianshu.io/upload_images/2346551-f7bade6adac99e16.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/849/format/webp" alt="只显示符合条件的文件夹"></p><h3 id="1-5-只搜索某目录下的文件怎么办？"><a href="#1-5-只搜索某目录下的文件怎么办？" class="headerlink" title="1.5 只搜索某目录下的文件怎么办？"></a>1.5 只搜索某目录下的文件怎么办？</h3><p>如果只想搜索某目录下的文件，则可以用目录加反斜杠，加空格，加关键词的方式进行搜索，例如：downloads\ 华为</p><p><img src="https://upload-images.jianshu.io/upload_images/2346551-cf50517c83645f63.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/844/format/webp" alt="只搜索某目录下的满足条件的文件"></p><h3 id="1-6-只搜索某种类型的文件怎么办？"><a href="#1-6-只搜索某种类型的文件怎么办？" class="headerlink" title="1.6 只搜索某种类型的文件怎么办？"></a>1.6 只搜索某种类型的文件怎么办？</h3><p>如果想搜索某种特定类型的文件，可以使用<em>.加文件类型后缀的方式，例如downloads\ </em>.pdf，就只显示该目录下的pdf文件，其他文件就不显示了。</p><p><img src="https://upload-images.jianshu.io/upload_images/2346551-11568ee05e6f2d7c.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/846/format/webp" alt="搜索某种特定类型的文件"></p><p>搜索某种特定类型的文件，使用*.后缀就可以了</p><h3 id="1-7-如何使用通配符？"><a href="#1-7-如何使用通配符？" class="headerlink" title="1.7 如何使用通配符？"></a>1.7 如何使用通配符？</h3><p>刚才我们已经举了两种使用通配符<em>的例子，简单讲</em>代表任意字符，问号(?)是代表一个字符（任意字符），例如：downloads\ *.p??，会显示downloads目录下的pdf文件，ppt文件等等，但不会显示pptx文件</p><p><img src="https://upload-images.jianshu.io/upload_images/2346551-d14ce197df94dd58.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/841/format/webp" alt="通配符?能够匹配任意一个字符"></p><p>通配符?能够匹配任意一个字符</p><h3 id="1-8-搜索不包含某关键词的文件名怎么办？"><a href="#1-8-搜索不包含某关键词的文件名怎么办？" class="headerlink" title="1.8 搜索不包含某关键词的文件名怎么办？"></a>1.8 搜索不包含某关键词的文件名怎么办？</h3><p>不包含由!代表，例如，我们想搜索downloads目录下不是pdf文件的其他文件，可以这样写：downloads\ !<em>.pdf !</em>.docx</p><p><img src="https://upload-images.jianshu.io/upload_images/2346551-1aed361c72869189.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/843/format/webp" alt="叹号代表否定"></p><p>叹号代表否定</p><h3 id="1-9-搜索的关键词中包含空格怎么办？"><a href="#1-9-搜索的关键词中包含空格怎么办？" class="headerlink" title="1.9 搜索的关键词中包含空格怎么办？"></a>1.9 搜索的关键词中包含空格怎么办？</h3><p>上面你可能已经看出来了，查询关键字中的空格，代表“且”的意思，即两个关键词中间如果有空格的话，代表同时包含两个关键词。但如果我想查询的关键词本身包含空格怎么办呢？ 可以用双引号把它们括起来，这样everything就会把它看待成一个词了。例如，我想查询downloads目录下包含university of bath的文件，可以写： downloads\ “university of”</p><p><img src="https://upload-images.jianshu.io/upload_images/2346551-d08a02722dc1166e.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/848/format/webp" alt=""></p><p>如果查询的关键字本身包含空格，应该用双引号把它引起来</p><h2 id="2-Everything的web服务器"><a href="#2-Everything的web服务器" class="headerlink" title="2. Everything的web服务器"></a>2. Everything的web服务器</h2><p>好了，everything的功能介绍完了，希望大家都能把它的功能用到极致，也不枉作者好心开发这么好的工具，免费放出来给大家用，也不枉那么那么多的小伙伴在网路上推荐它呀</p><p>最后，Everything还有一个功能提一下，就是可以从手机或平板上通过浏览器访问它，这样的话，您就可以从手机上搜索自己电脑上的电影看了。打开everything的网站功能：从菜单Tools（工具）-Options（选项）的对话框，选择Http Server（Http服务器），然后勾选第一个勾选框，下面第三行有一个端口号要记住，假设是10000，那么你在手机浏览器的地址栏输入http://电脑IP：10000就可以访问了。</p><p><img src="https://upload-images.jianshu.io/upload_images/2346551-be12b5e8eeab5f9d.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/885/format/webp" alt=""></p><p>打开Everything的web服务器可以从手机上访问您的文件哦</p>]]></content>
      
      
      <categories>
          
          <category> Windows软件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
            <tag> 猿说 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/01/29/hello-world/"/>
      <url>/2019/01/29/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
